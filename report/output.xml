<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 3.6.2 on linux)" generated="20171117 16:52:47.366">
<suite id="s1" name="Kuberobot" source="/home/kuberobot/kuberobot.robot">
<test id="s1-t1" name="Get api v1">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.597" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.597" endtime="20171117 16:52:47.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.606" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.598" endtime="20171117 16:52:47.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20171117 16:52:47.607" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.606" endtime="20171117 16:52:47.607"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.608" level="INFO">${json} = {'kind': 'APIResourceList', 'groupVersion': 'v1', 'resources': [{'name': 'bindings', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}, {'name': 'componentstatuses', 'sin...</msg>
<status status="PASS" starttime="20171117 16:52:47.607" endtime="20171117 16:52:47.608"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.609" level="INFO">{'kind': 'APIResourceList', 'groupVersion': 'v1', 'resources': [{'name': 'bindings', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}, {'name': 'componentstatuses', 'singularName': '', 'namespaced': False, 'kind': 'ComponentStatus', 'verbs': ['get', 'list'], 'shortNames': ['cs']}, {'name': 'configmaps', 'singularName': '', 'namespaced': True, 'kind': 'ConfigMap', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['cm']}, {'name': 'endpoints', 'singularName': '', 'namespaced': True, 'kind': 'Endpoints', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ep']}, {'name': 'events', 'singularName': '', 'namespaced': True, 'kind': 'Event', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ev']}, {'name': 'limitranges', 'singularName': '', 'namespaced': True, 'kind': 'LimitRange', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['limits']}, {'name': 'namespaces', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['create', 'delete', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ns']}, {'name': 'namespaces/finalize', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['update']}, {'name': 'namespaces/status', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['get', 'patch', 'update']}, {'name': 'nodes', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['no']}, {'name': 'nodes/proxy', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': []}, {'name': 'nodes/status', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': ['get', 'patch', 'update']}, {'name': 'persistentvolumeclaims', 'singularName': '', 'namespaced': True, 'kind': 'PersistentVolumeClaim', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['pvc']}, {'name': 'persistentvolumeclaims/status', 'singularName': '', 'namespaced': True, 'kind': 'PersistentVolumeClaim', 'verbs': ['get', 'patch', 'update']}, {'name': 'persistentvolumes', 'singularName': '', 'namespaced': False, 'kind': 'PersistentVolume', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['pv']}, {'name': 'persistentvolumes/status', 'singularName': '', 'namespaced': False, 'kind': 'PersistentVolume', 'verbs': ['get', 'patch', 'update']}, {'name': 'pods', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['po'], 'categories': ['all']}, {'name': 'pods/attach', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}, {'name': 'pods/binding', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}, {'name': 'pods/eviction', 'singularName': '', 'namespaced': True, 'kind': 'Eviction', 'verbs': ['create']}, {'name': 'pods/exec', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}, {'name': 'pods/log', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['get']}, {'name': 'pods/portforward', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}, {'name': 'pods/proxy', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}, {'name': 'pods/status', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['get', 'patch', 'update']}, {'name': 'podtemplates', 'singularName': '', 'namespaced': True, 'kind': 'PodTemplate', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']}, {'name': 'replicationcontrollers', 'singularName': '', 'namespaced': True, 'kind': 'ReplicationController', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['rc'], 'categories': ['all']}, {'name': 'replicationcontrollers/scale', 'singularName': '', 'namespaced': True, 'group': 'autoscaling', 'version': 'v1', 'kind': 'Scale', 'verbs': ['get', 'patch', 'update']}, {'name': 'replicationcontrollers/status', 'singularName': '', 'namespaced': True, 'kind': 'ReplicationController', 'verbs': ['get', 'patch', 'update']}, {'name': 'resourcequotas', 'singularName': '', 'namespaced': True, 'kind': 'ResourceQuota', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['quota']}, {'name': 'resourcequotas/status', 'singularName': '', 'namespaced': True, 'kind': 'ResourceQuota', 'verbs': ['get', 'patch', 'update']}, {'name': 'secrets', 'singularName': '', 'namespaced': True, 'kind': 'Secret', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']}, {'name': 'serviceaccounts', 'singularName': '', 'namespaced': True, 'kind': 'ServiceAccount', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['sa']}, {'name': 'services', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': ['create', 'delete', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['svc'], 'categories': ['all']}, {'name': 'services/proxy', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': []}, {'name': 'services/status', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': ['get', 'patch', 'update']}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.608" endtime="20171117 16:52:47.609"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${json}</arg>
<arg>kind</arg>
</arguments>
<assign>
<var>${kind}</var>
</assign>
<msg timestamp="20171117 16:52:47.610" level="INFO">${kind} = APIResourceList</msg>
<status status="PASS" starttime="20171117 16:52:47.609" endtime="20171117 16:52:47.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${kind}</arg>
<arg>APIResourceList</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.610" endtime="20171117 16:52:47.610"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${json}</arg>
<arg>resources</arg>
</arguments>
<assign>
<var>${resources}</var>
</assign>
<msg timestamp="20171117 16:52:47.611" level="INFO">${resources} = [{'name': 'bindings', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}, {'name': 'componentstatuses', 'singularName': '', 'namespaced': False, 'kind': 'ComponentStatus',...</msg>
<status status="PASS" starttime="20171117 16:52:47.610" endtime="20171117 16:52:47.611"></status>
</kw>
<kw name="${apiDict} IN [ @{resources} ]" type="for">
<kw name="${apiDict} = {'name': 'bindings', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.612" level="INFO">${apiName} = bindings</msg>
<status status="PASS" starttime="20171117 16:52:47.612" endtime="20171117 16:52:47.612"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.612" endtime="20171117 16:52:47.612"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.613" level="INFO">${apiVerbs} = ['create']</msg>
<status status="PASS" starttime="20171117 16:52:47.613" endtime="20171117 16:52:47.613"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.613" level="INFO">List has one item:
create</msg>
<status status="PASS" starttime="20171117 16:52:47.613" endtime="20171117 16:52:47.613"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.614" endtime="20171117 16:52:47.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.615" endtime="20171117 16:52:47.615"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.614" endtime="20171117 16:52:47.615"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.614" endtime="20171117 16:52:47.615"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.614" endtime="20171117 16:52:47.616"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.611" endtime="20171117 16:52:47.616"></status>
</kw>
<kw name="${apiDict} = {'name': 'componentstatuses', 'singularName': '', 'namespaced': False, 'kind': 'ComponentStatus', 'verbs': ['get', 'list'], 'shortNames': ['cs']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.616" level="INFO">${apiName} = componentstatuses</msg>
<status status="PASS" starttime="20171117 16:52:47.616" endtime="20171117 16:52:47.616"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.617" endtime="20171117 16:52:47.617"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.617" level="INFO">${apiVerbs} = ['get', 'list']</msg>
<status status="PASS" starttime="20171117 16:52:47.617" endtime="20171117 16:52:47.617"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.618" level="INFO">List length is 2 and it contains following items:
0: get
1: list</msg>
<status status="PASS" starttime="20171117 16:52:47.617" endtime="20171117 16:52:47.618"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>componentstatuses</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.620" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.620" endtime="20171117 16:52:47.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.626" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/componentstatuses, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.621" endtime="20171117 16:52:47.626"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.627" level="INFO">${json} = {'kind': 'ComponentStatusList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/componentstatuses'}, 'items': [{'metadata': {'name': 'controller-manager', 'selfLink': '/api/v1/componentstatuses/...</msg>
<status status="PASS" starttime="20171117 16:52:47.627" endtime="20171117 16:52:47.627"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.628" level="INFO">{'kind': 'ComponentStatusList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/componentstatuses'}, 'items': [{'metadata': {'name': 'controller-manager', 'selfLink': '/api/v1/componentstatuses/controller-manager', 'creationTimestamp': None}, 'conditions': [{'type': 'Healthy', 'status': 'True', 'message': 'ok'}]}, {'metadata': {'name': 'etcd-0', 'selfLink': '/api/v1/componentstatuses/etcd-0', 'creationTimestamp': None}, 'conditions': [{'type': 'Healthy', 'status': 'True', 'message': '{"health": "true"}'}]}, {'metadata': {'name': 'scheduler', 'selfLink': '/api/v1/componentstatuses/scheduler', 'creationTimestamp': None}, 'conditions': [{'type': 'Healthy', 'status': 'True', 'message': 'ok'}]}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.628" endtime="20171117 16:52:47.628"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.619" endtime="20171117 16:52:47.628"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.619" endtime="20171117 16:52:47.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.629" endtime="20171117 16:52:47.629"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.619" endtime="20171117 16:52:47.629"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.629" endtime="20171117 16:52:47.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.630" endtime="20171117 16:52:47.630"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.629" endtime="20171117 16:52:47.630"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.619" endtime="20171117 16:52:47.630"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.618" endtime="20171117 16:52:47.631"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.616" endtime="20171117 16:52:47.631"></status>
</kw>
<kw name="${apiDict} = {'name': 'configmaps', 'singularName': '', 'namespaced': True, 'kind': 'ConfigMap', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['cm']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.631" level="INFO">${apiName} = configmaps</msg>
<status status="PASS" starttime="20171117 16:52:47.631" endtime="20171117 16:52:47.631"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.632" endtime="20171117 16:52:47.632"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.632" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.632" endtime="20171117 16:52:47.632"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.633" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.633" endtime="20171117 16:52:47.633"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.634" endtime="20171117 16:52:47.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.635" endtime="20171117 16:52:47.635"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.634" endtime="20171117 16:52:47.635"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.635" endtime="20171117 16:52:47.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.636" endtime="20171117 16:52:47.636"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.635" endtime="20171117 16:52:47.636"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.637" endtime="20171117 16:52:47.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.637" endtime="20171117 16:52:47.638"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.637" endtime="20171117 16:52:47.638"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>configmaps</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.640" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.639" endtime="20171117 16:52:47.641"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.646" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/configmaps, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.641" endtime="20171117 16:52:47.646"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.647" level="INFO">${json} = {'kind': 'ConfigMapList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/configmaps', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'extension-apiserver-authentication', 'namesp...</msg>
<status status="PASS" starttime="20171117 16:52:47.647" endtime="20171117 16:52:47.647"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.648" level="INFO">{'kind': 'ConfigMapList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/configmaps', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'extension-apiserver-authentication', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/configmaps/extension-apiserver-authentication', 'uid': 'b0563f3d-c960-11e7-b342-5254002b24c6', 'resourceVersion': '15', 'creationTimestamp': '2017-11-14T17:24:37Z'}, 'data': {'client-ca-file': '-----BEGIN CERTIFICATE-----\nMIIC5zCCAc+gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p\na3ViZUNBMB4XDTE3MTAzMDIwNDA1NFoXDTI3MTAyODIwNDA1NFowFTETMBEGA1UE\nAxMKbWluaWt1YmVDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKHo\nf1KZ2wXEeSegPBrwFVtEK/bKf15GYJblub1rhTY+legYv/iZjZ2/HpHu4qQauNRx\nEwuepxANGTQeC/KkFOlZ4LjPxXzMZXnYlIMmjcdq2glurF4cIOgbCyVFb6Bat5Ib\nbOX48Ov/KtHlyZ7wcaG7B6puKn4nHIhHULfa3IH77YL1I1u/UOOLfVzlGChjn8dY\nQ+++F7hEJztNzu/66RR6xaaohi0c2e8TvvYb9W2987HJD/AQoAXdUVR6lVOMUShG\n7EBqGr+Ov8Hc/k/WRMDaRK1AtVanaTiDhRtR3iI2ZaY/D1Yz858EZos2r3TUA+Jh\niZsmefNJwG5ZRnn6Wp0CAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgKkMB0GA1UdJQQW\nMBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3\nDQEBCwUAA4IBAQAfDUZW+WG+lFup/ifvsJHyJo6hlZ6vz+A46JHcQnh//iMjAWpO\nv7Lj4SdEGYrxfWqFpDw3CxdUizR7OCWNyd5uR9YJz3+uGIn9p4BN8LltLbOyY0Ad\nhvrYqo1DWldXM3n3xsO9b4hUYopJkk29RGLEog8auDgVfJZuXXbru/OE8kMMdKUG\nphJmX3+BUS83J1JHuH8R0G1qVl4hH3J+CCUDH5oiorkdwg3/fB/Lm6blBWxy5Mxg\nQrXYALmzFyiZxRABq/13nVp0sh57ec/JR6hTj/450Xn+O9/HgOeJBvKWC03uCK9f\nDDPzu3DBR6StbrJXVUnRROHGqANxV2bknRcc\n-----END CERTIFICATE-----\n', 'requestheader-allowed-names': '[]', 'requestheader-client-ca-file': '-----BEGIN CERTIFICATE-----\nMIIC7TCCAdWgAwIBAgIBATANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDEw1wcm94\neUNsaWVudENBMB4XDTE3MTAzMDIwNDA1NFoXDTI3MTAyODIwNDA1NFowGDEWMBQG\nA1UEAxMNcHJveHlDbGllbnRDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAJtgvzrsXrLabJejaJ86icaurNcO0bfVxZTgHVLUUhogCpl5ArmuhcLAk/96\n47KLT1+WprVaDQribXvaAmhElWYLG/rP+2g34EEl/HOflB4Tf1wSTjod01aWh+WA\nhJLC+dVIUqA6iN0s5h2ZbNvtcb5Kc0PEPi5n8x4Opv2ywNTLycQZtfTEMGzGxkSp\n1MKnx3bdxOManb+zrfDxoecsYSvviqYHwtz+TGhczOTuSXU4qrL3lkDglcKprmhe\nFUN/Vlx+A1rhKzp4TyOwj1IZ9Sh/5A+I1kwL441mXOLnJ/P2lIHx0pkA2QUukpY1\nFoG6adIQhWKg9m7qtC2MO4Mix4MCAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgKkMB0G\nA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MA0G\nCSqGSIb3DQEBCwUAA4IBAQBN31Lt51HALSyrjPT8fX821JBn807d/DYhqMpSW33W\n0bXcbxUVZnkXy+p6u9/GE235dPdO9x/3VlIBjdmEkX6FyWtENsVB72XcDfBkCch7\nB4pASG5gMnywsc+5jxW1scen1gWhx3/ofN+UcaIiB7n73CJWS7DWhbKkk4X2GmkW\nCv4Xg1/2l2nIdTnz5ztGDssDwVm0rxQhRQAuX+PmSfxVhQ38s8TF/tsSWOW7EKsu\nF2V2eCwd1z7YmQKu7COeGTEsheWfws0pBoffFf1csVLvIh8vn+QrwaVhQFoNpch1\nsijrrLY/ei1yZQTYbiTvHUai8ENF9U8j9APqLJ+ANE5a\n-----END CERTIFICATE-----\n', 'requestheader-extra-headers-prefix': '["X-Remote-Extra-"]', 'requestheader-group-headers': '["X-Remote-Group"]', 'requestheader-username-headers': '["X-Remote-User"]'}}, {'metadata': {'name': 'ingress-controller-leader-nginx', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/configmaps/ingress-controller-leader-nginx', 'uid': 'd9af41ef-c960-11e7-b342-5254002b24c6', 'resourceVersion': '340769', 'creationTimestamp': '2017-11-14T17:25:46Z', 'annotations': {'control-plane.alpha.kubernetes.io/leader': '{"holderIdentity":"nginx-ingress-controller-s8gnw","leaseDurationSeconds":30,"acquireTime":"2017-11-14T17:25:46Z","renewTime":"2017-11-17T21:52:43Z","leaderTransitions":0}'}}}, {'metadata': {'name': 'kube-dns', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/configmaps/kube-dns', 'uid': 'b7054a29-c960-11e7-b342-5254002b24c6', 'resourceVersion': '78', 'creationTimestamp': '2017-11-14T17:24:48Z', 'labels': {'addonmanager.kubernetes.io/mode': 'EnsureExists'}}}, {'metadata': {'name': 'nginx-load-balancer-conf', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/configmaps/nginx-load-balancer-conf', 'uid': 'b7ccbc2f-c960-11e7-b342-5254002b24c6', 'resourceVersion': '93', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","data":{"map-hash-bucket-size":"128"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile"},"name":"nginx-load-balancer-conf","namespace":"kube-system"}}\n'}}, 'data': {'map-hash-bucket-size': '128'}}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.647" endtime="20171117 16:52:47.648"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.639" endtime="20171117 16:52:47.648"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.638" endtime="20171117 16:52:47.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.648" endtime="20171117 16:52:47.649"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.638" endtime="20171117 16:52:47.649"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.649" endtime="20171117 16:52:47.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.650" endtime="20171117 16:52:47.650"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.649" endtime="20171117 16:52:47.650"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.651" endtime="20171117 16:52:47.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.651" endtime="20171117 16:52:47.652"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.650" endtime="20171117 16:52:47.652"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.652" endtime="20171117 16:52:47.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.652" endtime="20171117 16:52:47.653"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.652" endtime="20171117 16:52:47.653"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.653" endtime="20171117 16:52:47.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.654" endtime="20171117 16:52:47.654"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.653" endtime="20171117 16:52:47.654"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.634" endtime="20171117 16:52:47.654"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.633" endtime="20171117 16:52:47.654"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.631" endtime="20171117 16:52:47.654"></status>
</kw>
<kw name="${apiDict} = {'name': 'endpoints', 'singularName': '', 'namespaced': True, 'kind': 'Endpoints', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ep']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.655" level="INFO">${apiName} = endpoints</msg>
<status status="PASS" starttime="20171117 16:52:47.655" endtime="20171117 16:52:47.655"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.655" endtime="20171117 16:52:47.655"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.656" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.656" endtime="20171117 16:52:47.656"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.656" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.656" endtime="20171117 16:52:47.656"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.657" endtime="20171117 16:52:47.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.658" endtime="20171117 16:52:47.658"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.657" endtime="20171117 16:52:47.658"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.659" endtime="20171117 16:52:47.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.659" endtime="20171117 16:52:47.660"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.658" endtime="20171117 16:52:47.660"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.660" endtime="20171117 16:52:47.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.661" endtime="20171117 16:52:47.661"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.660" endtime="20171117 16:52:47.661"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>endpoints</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.662" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.662" endtime="20171117 16:52:47.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.668" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/endpoints, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.663" endtime="20171117 16:52:47.668"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.669" level="INFO">${json} = {'kind': 'EndpointsList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/endpoints', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'hello-minikube', 'namespace': 'default', 'sel...</msg>
<status status="PASS" starttime="20171117 16:52:47.669" endtime="20171117 16:52:47.669"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.670" level="INFO">{'kind': 'EndpointsList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/endpoints', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'hello-minikube', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/endpoints/hello-minikube', 'uid': '6db508be-c961-11e7-b342-5254002b24c6', 'resourceVersion': '607', 'creationTimestamp': '2017-11-14T17:29:54Z', 'labels': {'run': 'hello-minikube'}}, 'subsets': [{'addresses': [{'ip': '172.17.0.6', 'nodeName': 'minikube', 'targetRef': {'kind': 'Pod', 'namespace': 'default', 'name': 'hello-minikube-5d89cbb865-znjsc', 'uid': '689c1e52-c961-11e7-b342-5254002b24c6', 'resourceVersion': '605'}}], 'ports': [{'port': 8081, 'protocol': 'TCP'}]}]}, {'metadata': {'name': 'kubernetes', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/endpoints/kubernetes', 'uid': 'afc12d95-c960-11e7-b342-5254002b24c6', 'resourceVersion': '7', 'creationTimestamp': '2017-11-14T17:24:36Z'}, 'subsets': [{'addresses': [{'ip': '192.168.122.111'}], 'ports': [{'name': 'https', 'port': 8443, 'protocol': 'TCP'}]}]}, {'metadata': {'name': 'default-http-backend', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/endpoints/default-http-backend', 'uid': 'b7f5fbbd-c960-11e7-b342-5254002b24c6', 'resourceVersion': '248', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'default-http-backend'}}, 'subsets': [{'addresses': [{'ip': '172.17.0.3', 'nodeName': 'minikube', 'targetRef': {'kind': 'Pod', 'namespace': 'kube-system', 'name': 'default-http-backend-vs9l5', 'uid': 'b7dcabb2-c960-11e7-b342-5254002b24c6', 'resourceVersion': '247'}}], 'ports': [{'port': 8080, 'protocol': 'TCP'}]}]}, {'metadata': {'name': 'kube-controller-manager', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/endpoints/kube-controller-manager', 'uid': 'b09e7d16-c960-11e7-b342-5254002b24c6', 'resourceVersion': '340774', 'creationTimestamp': '2017-11-14T17:24:37Z', 'annotations': {'control-plane.alpha.kubernetes.io/leader': '{"holderIdentity":"minikube","leaseDurationSeconds":15,"acquireTime":"2017-11-14T17:24:37Z","renewTime":"2017-11-17T21:52:46Z","leaderTransitions":0}'}}, 'subsets': None}, {'metadata': {'name': 'kube-dns', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/endpoints/kube-dns', 'uid': 'b81546c9-c960-11e7-b342-5254002b24c6', 'resourceVersion': '184', 'creationTimestamp': '2017-11-14T17:24:50Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'k8s-app': 'kube-dns', 'kubernetes.io/name': 'KubeDNS'}}, 'subsets': [{'addresses': [{'ip': '172.17.0.5', 'nodeName': 'minikube', 'targetRef': {'kind': 'Pod', 'namespace': 'kube-system', 'name': 'kube-dns-6fc954457d-7gk8n', 'uid': 'b80a582f-c960-11e7-b342-5254002b24c6', 'resourceVersion': '183'}}], 'ports': [{'name': 'dns', 'port': 53, 'protocol': 'UDP'}, {'name': 'dns-tcp', 'port': 53, 'protocol': 'TCP'}]}]}, {'metadata': {'name': 'kube-scheduler', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/endpoints/kube-scheduler', 'uid': 'b1af1ccb-c960-11e7-b342-5254002b24c6', 'resourceVersion': '340773', 'creationTimestamp': '2017-11-14T17:24:39Z', 'annotations': {'control-plane.alpha.kubernetes.io/leader': '{"holderIdentity":"minikube","leaseDurationSeconds":15,"acquireTime":"2017-11-14T17:24:39Z","renewTime":"2017-11-17T21:52:46Z","leaderTransitions":0}'}}, 'subsets': None}, {'metadata': {'name': 'kubernetes-dashboard', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/endpoints/kubernetes-dashboard', 'uid': 'b7c184bf-c960-11e7-b342-5254002b24c6', 'resourceVersion': '203', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'kubernetes-dashboard', 'kubernetes.io/minikube-addons': 'dashboard', 'kubernetes.io/minikube-addons-endpoint': 'dashboard'}}, 'subsets': [{'addresses': [{'ip': '172.17.0.2', 'nodeName': 'minikube', 'targetRef': {'kind': 'Pod', 'namespace': 'kube-system', 'name': 'kubernetes-dashboard-bjlxb', 'uid': 'b7b4005c-c960-11e7-b342-5254002b24c6', 'resourceVersion': '201'}}], 'ports': [{'port': 9090, 'protocol': 'TCP'}]}]}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.670" endtime="20171117 16:52:47.670"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.662" endtime="20171117 16:52:47.670"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.661" endtime="20171117 16:52:47.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.671" endtime="20171117 16:52:47.671"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.661" endtime="20171117 16:52:47.671"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.671" endtime="20171117 16:52:47.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.672" endtime="20171117 16:52:47.672"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.671" endtime="20171117 16:52:47.672"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.673" endtime="20171117 16:52:47.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.673" endtime="20171117 16:52:47.674"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.672" endtime="20171117 16:52:47.674"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.674" endtime="20171117 16:52:47.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.675" endtime="20171117 16:52:47.675"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.674" endtime="20171117 16:52:47.675"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.675" endtime="20171117 16:52:47.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.676" endtime="20171117 16:52:47.676"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.675" endtime="20171117 16:52:47.676"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.657" endtime="20171117 16:52:47.676"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.657" endtime="20171117 16:52:47.676"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.654" endtime="20171117 16:52:47.676"></status>
</kw>
<kw name="${apiDict} = {'name': 'events', 'singularName': '', 'namespaced': True, 'kind': 'Event', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ev']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.677" level="INFO">${apiName} = events</msg>
<status status="PASS" starttime="20171117 16:52:47.677" endtime="20171117 16:52:47.677"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.677" endtime="20171117 16:52:47.678"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.678" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.678" endtime="20171117 16:52:47.678"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.679" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.678" endtime="20171117 16:52:47.679"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.680" endtime="20171117 16:52:47.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.680" endtime="20171117 16:52:47.681"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.679" endtime="20171117 16:52:47.681"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.681" endtime="20171117 16:52:47.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.681" endtime="20171117 16:52:47.682"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.681" endtime="20171117 16:52:47.682"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.682" endtime="20171117 16:52:47.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.683" endtime="20171117 16:52:47.683"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.682" endtime="20171117 16:52:47.683"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>events</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.685" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.684" endtime="20171117 16:52:47.685"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.690" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/events, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.685" endtime="20171117 16:52:47.690"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.691" level="INFO">${json} = {'kind': 'EventList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/events', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'minikube.14f703b61a31d50a', 'namespace': 'default', ...</msg>
<status status="PASS" starttime="20171117 16:52:47.690" endtime="20171117 16:52:47.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.691" level="INFO">{'kind': 'EventList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/events', 'resourceVersion': '340774'}, 'items': [{'metadata': {'name': 'minikube.14f703b61a31d50a', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/events/minikube.14f703b61a31d50a', 'uid': 'b27ef947-c960-11e7-b342-5254002b24c6', 'resourceVersion': '340546', 'creationTimestamp': '2017-11-14T17:24:40Z'}, 'involvedObject': {'kind': 'Node', 'name': 'minikube', 'uid': 'minikube'}, 'reason': 'FailedToStartNodeHealthcheck', 'message': 'Failed to start node healthz on 0: listen tcp: address 0: missing port in address', 'source': {'component': 'kube-proxy', 'host': 'minikube'}, 'firstTimestamp': '2017-11-14T17:24:40Z', 'lastTimestamp': '2017-11-17T21:49:42Z', 'count': 4586, 'type': 'Warning'}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.691" endtime="20171117 16:52:47.691"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.684" endtime="20171117 16:52:47.691"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.683" endtime="20171117 16:52:47.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.692" endtime="20171117 16:52:47.692"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.683" endtime="20171117 16:52:47.692"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.692" endtime="20171117 16:52:47.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.693" endtime="20171117 16:52:47.693"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.692" endtime="20171117 16:52:47.693"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.694" endtime="20171117 16:52:47.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.694" endtime="20171117 16:52:47.695"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.694" endtime="20171117 16:52:47.695"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.695" endtime="20171117 16:52:47.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.695" endtime="20171117 16:52:47.696"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.695" endtime="20171117 16:52:47.696"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.696" endtime="20171117 16:52:47.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.697" endtime="20171117 16:52:47.697"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.696" endtime="20171117 16:52:47.697"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.679" endtime="20171117 16:52:47.697"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.679" endtime="20171117 16:52:47.697"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.677" endtime="20171117 16:52:47.697"></status>
</kw>
<kw name="${apiDict} = {'name': 'limitranges', 'singularName': '', 'namespaced': True, 'kind': 'LimitRange', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['limi..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.698" level="INFO">${apiName} = limitranges</msg>
<status status="PASS" starttime="20171117 16:52:47.698" endtime="20171117 16:52:47.698"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.698" endtime="20171117 16:52:47.699"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.699" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.699" endtime="20171117 16:52:47.699"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.699" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.699" endtime="20171117 16:52:47.700"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.701" endtime="20171117 16:52:47.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.701" endtime="20171117 16:52:47.702"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.700" endtime="20171117 16:52:47.702"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.702" endtime="20171117 16:52:47.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.702" endtime="20171117 16:52:47.703"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.702" endtime="20171117 16:52:47.703"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.703" endtime="20171117 16:52:47.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.704" endtime="20171117 16:52:47.704"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.703" endtime="20171117 16:52:47.704"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>limitranges</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.706" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.705" endtime="20171117 16:52:47.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.710" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/limitranges, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.706" endtime="20171117 16:52:47.711"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.711" level="INFO">${json} = {'kind': 'LimitRangeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/limitranges', 'resourceVersion': '340774'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.711" endtime="20171117 16:52:47.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.712" level="INFO">{'kind': 'LimitRangeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/limitranges', 'resourceVersion': '340774'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.712" endtime="20171117 16:52:47.712"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.705" endtime="20171117 16:52:47.712"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.704" endtime="20171117 16:52:47.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.713" endtime="20171117 16:52:47.713"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.704" endtime="20171117 16:52:47.713"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.713" endtime="20171117 16:52:47.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.714" endtime="20171117 16:52:47.714"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.713" endtime="20171117 16:52:47.714"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.715" endtime="20171117 16:52:47.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.715" endtime="20171117 16:52:47.716"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.715" endtime="20171117 16:52:47.716"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.716" endtime="20171117 16:52:47.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.717" endtime="20171117 16:52:47.717"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.716" endtime="20171117 16:52:47.717"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.717" endtime="20171117 16:52:47.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.718" endtime="20171117 16:52:47.718"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.717" endtime="20171117 16:52:47.718"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.700" endtime="20171117 16:52:47.719"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.700" endtime="20171117 16:52:47.719"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.698" endtime="20171117 16:52:47.719"></status>
</kw>
<kw name="${apiDict} = {'name': 'namespaces', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['create', 'delete', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ['ns']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.719" level="INFO">${apiName} = namespaces</msg>
<status status="PASS" starttime="20171117 16:52:47.719" endtime="20171117 16:52:47.719"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.720" endtime="20171117 16:52:47.720"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.720" level="INFO">${apiVerbs} = ['create', 'delete', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.720" endtime="20171117 16:52:47.720"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.721" level="INFO">List length is 7 and it contains following items:
0: create
1: delete
2: get
3: list
4: patch
5: update
6: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.721" endtime="20171117 16:52:47.721"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.722" endtime="20171117 16:52:47.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIpost">
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.724" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.723" endtime="20171117 16:52:47.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20171117 16:52:47.725" level="INFO">&amp;{headers} = { Content-Type=application/json }</msg>
<status status="PASS" starttime="20171117 16:52:47.724" endtime="20171117 16:52:47.725"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}/default/pods</arg>
<arg>data=${MYPOD}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.735" level="INFO">Post Request using : alias=kubernetes, uri=/api/v1/namespaces/default/pods, data={"kind":"Pod","apiVersion":"v1","metadata":{"name":"nginx","namespace":"default","labels":{ "name": "nginx" } }, "spec": { "containers": [{ "name": "nginx", "image": "nginx","ports": [{"containerPort": 80}], "resources": { "limits": { "memory": "128Mi", "cpu": "500m" }}}]}}, headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171117 16:52:47.736" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.725" endtime="20171117 16:52:47.736"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>gugu</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.736" endtime="20171117 16:52:47.736"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.723" endtime="20171117 16:52:47.736"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.723" endtime="20171117 16:52:47.737"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.722" endtime="20171117 16:52:47.737"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.737" endtime="20171117 16:52:47.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.738" endtime="20171117 16:52:47.738"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.737" endtime="20171117 16:52:47.738"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>namespaces</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.740" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.739" endtime="20171117 16:52:47.740"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.745" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/namespaces, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.741" endtime="20171117 16:52:47.746"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.747" level="INFO">${json} = {'kind': 'NamespaceList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/namespaces', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'default', 'selfLink': '/api/v1/namespaces/de...</msg>
<status status="PASS" starttime="20171117 16:52:47.746" endtime="20171117 16:52:47.747"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.747" level="INFO">{'kind': 'NamespaceList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/namespaces', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'default', 'selfLink': '/api/v1/namespaces/default', 'uid': 'afbf9aba-c960-11e7-b342-5254002b24c6', 'resourceVersion': '4', 'creationTimestamp': '2017-11-14T17:24:36Z'}, 'spec': {'finalizers': ['kubernetes']}, 'status': {'phase': 'Active'}}, {'metadata': {'name': 'kube-public', 'selfLink': '/api/v1/namespaces/kube-public', 'uid': 'afc224aa-c960-11e7-b342-5254002b24c6', 'resourceVersion': '9', 'creationTimestamp': '2017-11-14T17:24:36Z'}, 'spec': {'finalizers': ['kubernetes']}, 'status': {'phase': 'Active'}}, {'metadata': {'name': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system', 'uid': 'afc1ade8-c960-11e7-b342-5254002b24c6', 'resourceVersion': '74', 'creationTimestamp': '2017-11-14T17:24:36Z', 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"name":"kube-system","namespace":""}}\n'}}, 'spec': {'finalizers': ['kubernetes']}, 'status': {'phase': 'Active'}}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.747" endtime="20171117 16:52:47.747"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.739" endtime="20171117 16:52:47.747"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.738" endtime="20171117 16:52:47.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.748" endtime="20171117 16:52:47.748"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.738" endtime="20171117 16:52:47.748"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.749" endtime="20171117 16:52:47.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.749" endtime="20171117 16:52:47.750"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.748" endtime="20171117 16:52:47.750"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.750" endtime="20171117 16:52:47.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.751" endtime="20171117 16:52:47.751"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.750" endtime="20171117 16:52:47.751"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.751" endtime="20171117 16:52:47.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.752" endtime="20171117 16:52:47.752"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.751" endtime="20171117 16:52:47.752"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.753" endtime="20171117 16:52:47.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.753" endtime="20171117 16:52:47.754"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.753" endtime="20171117 16:52:47.754"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.722" endtime="20171117 16:52:47.754"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.721" endtime="20171117 16:52:47.754"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.719" endtime="20171117 16:52:47.754"></status>
</kw>
<kw name="${apiDict} = {'name': 'namespaces/finalize', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.755" level="INFO">${apiName} = namespaces/finalize</msg>
<status status="PASS" starttime="20171117 16:52:47.754" endtime="20171117 16:52:47.755"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.755" endtime="20171117 16:52:47.755"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.756" level="INFO">${apiVerbs} = ['update']</msg>
<status status="PASS" starttime="20171117 16:52:47.755" endtime="20171117 16:52:47.756"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.756" level="INFO">List has one item:
update</msg>
<status status="PASS" starttime="20171117 16:52:47.756" endtime="20171117 16:52:47.756"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.758" endtime="20171117 16:52:47.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.758" endtime="20171117 16:52:47.759"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.757" endtime="20171117 16:52:47.759"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.757" endtime="20171117 16:52:47.759"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.757" endtime="20171117 16:52:47.759"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.754" endtime="20171117 16:52:47.759"></status>
</kw>
<kw name="${apiDict} = {'name': 'namespaces/status', 'singularName': '', 'namespaced': False, 'kind': 'Namespace', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.760" level="INFO">${apiName} = namespaces/status</msg>
<status status="PASS" starttime="20171117 16:52:47.760" endtime="20171117 16:52:47.760"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.760" endtime="20171117 16:52:47.761"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.761" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:47.761" endtime="20171117 16:52:47.761"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.762" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:47.761" endtime="20171117 16:52:47.762"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>namespaces/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.764" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.764" endtime="20171117 16:52:47.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.771" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/namespaces/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.771" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.765" endtime="20171117 16:52:47.771"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.772" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'namespaces "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'namespaces'}, 'code...</msg>
<status status="PASS" starttime="20171117 16:52:47.771" endtime="20171117 16:52:47.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.772" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'namespaces "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'namespaces'}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.772" endtime="20171117 16:52:47.772"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.763" endtime="20171117 16:52:47.773"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.763" endtime="20171117 16:52:47.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.773" endtime="20171117 16:52:47.773"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.762" endtime="20171117 16:52:47.773"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.774" endtime="20171117 16:52:47.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.774" endtime="20171117 16:52:47.775"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.774" endtime="20171117 16:52:47.775"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.775" endtime="20171117 16:52:47.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.776" endtime="20171117 16:52:47.776"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.775" endtime="20171117 16:52:47.776"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.762" endtime="20171117 16:52:47.776"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.762" endtime="20171117 16:52:47.777"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.759" endtime="20171117 16:52:47.777"></status>
</kw>
<kw name="${apiDict} = {'name': 'nodes', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['no']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.777" level="INFO">${apiName} = nodes</msg>
<status status="PASS" starttime="20171117 16:52:47.777" endtime="20171117 16:52:47.777"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.777" endtime="20171117 16:52:47.778"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.778" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.778" endtime="20171117 16:52:47.778"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.779" level="INFO">List length is 9 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: proxy
7: update
8: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.779" endtime="20171117 16:52:47.779"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.780" endtime="20171117 16:52:47.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.780" endtime="20171117 16:52:47.781"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.780" endtime="20171117 16:52:47.781"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.781" endtime="20171117 16:52:47.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.782" endtime="20171117 16:52:47.782"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.781" endtime="20171117 16:52:47.782"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.783" endtime="20171117 16:52:47.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.783" endtime="20171117 16:52:47.784"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.782" endtime="20171117 16:52:47.784"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>nodes</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.785" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.785" endtime="20171117 16:52:47.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.790" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/nodes, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.786" endtime="20171117 16:52:47.791"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.792" level="INFO">${json} = {'kind': 'NodeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/nodes', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'minikube', 'selfLink': '/api/v1/nodes/minikube', 'uid'...</msg>
<status status="PASS" starttime="20171117 16:52:47.791" endtime="20171117 16:52:47.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.792" level="INFO">{'kind': 'NodeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/nodes', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'minikube', 'selfLink': '/api/v1/nodes/minikube', 'uid': 'b2bbbfd9-c960-11e7-b342-5254002b24c6', 'resourceVersion': '340772', 'creationTimestamp': '2017-11-14T17:24:41Z', 'labels': {'beta.kubernetes.io/arch': 'amd64', 'beta.kubernetes.io/os': 'linux', 'kubernetes.io/hostname': 'minikube'}, 'annotations': {'alpha.kubernetes.io/provided-node-ip': '192.168.42.238', 'node.alpha.kubernetes.io/ttl': '0', 'volumes.kubernetes.io/controller-managed-attach-detach': 'true'}}, 'spec': {'externalID': 'minikube'}, 'status': {'capacity': {'cpu': '8', 'memory': '8174384Ki', 'pods': '110'}, 'allocatable': {'cpu': '8', 'memory': '8071984Ki', 'pods': '110'}, 'conditions': [{'type': 'OutOfDisk', 'status': 'False', 'lastHeartbeatTime': '2017-11-17T21:52:45Z', 'lastTransitionTime': '2017-11-14T17:24:41Z', 'reason': 'KubeletHasSufficientDisk', 'message': 'kubelet has sufficient disk space available'}, {'type': 'MemoryPressure', 'status': 'False', 'lastHeartbeatTime': '2017-11-17T21:52:45Z', 'lastTransitionTime': '2017-11-14T17:24:41Z', 'reason': 'KubeletHasSufficientMemory', 'message': 'kubelet has sufficient memory available'}, {'type': 'DiskPressure', 'status': 'False', 'lastHeartbeatTime': '2017-11-17T21:52:45Z', 'lastTransitionTime': '2017-11-14T17:24:41Z', 'reason': 'KubeletHasNoDiskPressure', 'message': 'kubelet has no disk pressure'}, {'type': 'Ready', 'status': 'True', 'lastHeartbeatTime': '2017-11-17T21:52:45Z', 'lastTransitionTime': '2017-11-14T17:24:51Z', 'reason': 'KubeletReady', 'message': 'kubelet is posting ready status'}], 'addresses': [{'type': 'InternalIP', 'address': '192.168.42.238'}, {'type': 'Hostname', 'address': 'minikube'}], 'daemonEndpoints': {'kubeletEndpoint': {'Port': 10250}}, 'nodeInfo': {'machineID': '22ddab20424d47398692ff526b6d3217', 'systemUUID': '22DDAB20-424D-4739-8692-FF526B6D3217', 'bootID': '3966cc69-e48f-44cc-8f96-99dd6f9cece7', 'kernelVersion': '4.9.13', 'osImage': 'Buildroot 2017.02', 'containerRuntimeVersion': 'docker://Unknown', 'kubeletVersion': 'v1.8.0', 'kubeProxyVersion': 'v1.8.0', 'operatingSystem': 'linux', 'architecture': 'amd64'}, 'images': [{'names': ['gcr.io/google_containers/nginx-ingress-controller@sha256:1c64bc6dfb7ddbe4a0a9fce7f5c521aa13e7836c3b90601897b763add8494a41', 'gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15'], 'sizeBytes': 162112068}, {'names': ['gcr.io/google_containers/echoserver@sha256:5d99aa1120524c801bc8c1a7077e8f5ec122ba16b6dda1a5d3826057f67b9bcb', 'gcr.io/google_containers/echoserver:1.4'], 'sizeBytes': 140393469}, {'names': ['gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.3'], 'sizeBytes': 138972432}, {'names': ['gcr.io/google_containers/kubernetes-dashboard-amd64@sha256:c94b57ce6849365033203a00ef5cfaaf92319bd5ff311a62b17cd9f6a3b69d83', 'gcr.io/google_containers/kubernetes-dashboard-amd64:v1.7.0'], 'sizeBytes': 127793164}, {'names': ['gcr.io/google-containers/kube-addon-manager:v6.4-beta.2'], 'sizeBytes': 79238665}, {'names': ['gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5'], 'sizeBytes': 49387411}, {'names': ['gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5'], 'sizeBytes': 41819177}, {'names': ['gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5'], 'sizeBytes': 41423617}, {'names': ['gcr.io/google_containers/defaultbackend@sha256:fb91f9395ddf44df1ca3adf68b25dcbc269e5d08ba14a40de9abdedafacf93d4', 'gcr.io/google_containers/defaultbackend:1.3'], 'sizeBytes': 3618880}, {'names': ['gcr.io/google_containers/pause-amd64:3.0'], 'sizeBytes': 746888}]}}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.792" endtime="20171117 16:52:47.792"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.784" endtime="20171117 16:52:47.793"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.784" endtime="20171117 16:52:47.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.793" endtime="20171117 16:52:47.793"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.784" endtime="20171117 16:52:47.793"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.794" endtime="20171117 16:52:47.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.794" endtime="20171117 16:52:47.795"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.793" endtime="20171117 16:52:47.795"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.795" endtime="20171117 16:52:47.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.795" endtime="20171117 16:52:47.796"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.795" endtime="20171117 16:52:47.796"></status>
</kw>
<kw name="${apiverb} = proxy" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.796" endtime="20171117 16:52:47.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.797" endtime="20171117 16:52:47.797"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.796" endtime="20171117 16:52:47.797"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.797" endtime="20171117 16:52:47.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.798" endtime="20171117 16:52:47.798"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.797" endtime="20171117 16:52:47.798"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.799" endtime="20171117 16:52:47.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.799" endtime="20171117 16:52:47.800"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.799" endtime="20171117 16:52:47.800"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.780" endtime="20171117 16:52:47.800"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.779" endtime="20171117 16:52:47.800"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.777" endtime="20171117 16:52:47.800"></status>
</kw>
<kw name="${apiDict} = {'name': 'nodes/proxy', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.801" level="INFO">${apiName} = nodes/proxy</msg>
<status status="PASS" starttime="20171117 16:52:47.800" endtime="20171117 16:52:47.801"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.801" endtime="20171117 16:52:47.801"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.802" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:47.801" endtime="20171117 16:52:47.802"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.802" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:47.802" endtime="20171117 16:52:47.802"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:47.803" endtime="20171117 16:52:47.803"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.802" endtime="20171117 16:52:47.803"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.800" endtime="20171117 16:52:47.803"></status>
</kw>
<kw name="${apiDict} = {'name': 'nodes/status', 'singularName': '', 'namespaced': False, 'kind': 'Node', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.804" level="INFO">${apiName} = nodes/status</msg>
<status status="PASS" starttime="20171117 16:52:47.803" endtime="20171117 16:52:47.804"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.804" endtime="20171117 16:52:47.804"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.805" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:47.804" endtime="20171117 16:52:47.805"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.805" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:47.805" endtime="20171117 16:52:47.805"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>nodes/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.807" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.807" endtime="20171117 16:52:47.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.812" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/nodes/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.812" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.808" endtime="20171117 16:52:47.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.813" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'nodes "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'nodes'}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.813" endtime="20171117 16:52:47.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.814" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'nodes "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'nodes'}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.813" endtime="20171117 16:52:47.814"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.807" endtime="20171117 16:52:47.814"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.806" endtime="20171117 16:52:47.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.814" endtime="20171117 16:52:47.815"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.806" endtime="20171117 16:52:47.815"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.815" endtime="20171117 16:52:47.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.816" endtime="20171117 16:52:47.816"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.815" endtime="20171117 16:52:47.816"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.816" endtime="20171117 16:52:47.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.817" endtime="20171117 16:52:47.817"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.816" endtime="20171117 16:52:47.817"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.806" endtime="20171117 16:52:47.817"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.805" endtime="20171117 16:52:47.817"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.803" endtime="20171117 16:52:47.817"></status>
</kw>
<kw name="${apiDict} = {'name': 'persistentvolumeclaims', 'singularName': '', 'namespaced': True, 'kind': 'PersistentVolumeClaim', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.818" level="INFO">${apiName} = persistentvolumeclaims</msg>
<status status="PASS" starttime="20171117 16:52:47.818" endtime="20171117 16:52:47.818"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.818" endtime="20171117 16:52:47.819"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.819" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.819" endtime="20171117 16:52:47.819"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.820" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.819" endtime="20171117 16:52:47.820"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.821" endtime="20171117 16:52:47.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.821" endtime="20171117 16:52:47.822"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.820" endtime="20171117 16:52:47.822"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.822" endtime="20171117 16:52:47.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.822" endtime="20171117 16:52:47.823"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.822" endtime="20171117 16:52:47.823"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.823" endtime="20171117 16:52:47.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.824" endtime="20171117 16:52:47.824"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.823" endtime="20171117 16:52:47.824"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>persistentvolumeclaims</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.826" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.825" endtime="20171117 16:52:47.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.831" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/persistentvolumeclaims, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.826" endtime="20171117 16:52:47.831"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.832" level="INFO">${json} = {'kind': 'PersistentVolumeClaimList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/persistentvolumeclaims', 'resourceVersion': '340778'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.831" endtime="20171117 16:52:47.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.832" level="INFO">{'kind': 'PersistentVolumeClaimList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/persistentvolumeclaims', 'resourceVersion': '340778'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.832" endtime="20171117 16:52:47.832"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.825" endtime="20171117 16:52:47.833"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.824" endtime="20171117 16:52:47.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.833" endtime="20171117 16:52:47.833"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.824" endtime="20171117 16:52:47.833"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.834" endtime="20171117 16:52:47.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.834" endtime="20171117 16:52:47.835"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.833" endtime="20171117 16:52:47.835"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.835" endtime="20171117 16:52:47.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.836" endtime="20171117 16:52:47.836"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.835" endtime="20171117 16:52:47.836"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.837" endtime="20171117 16:52:47.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.837" endtime="20171117 16:52:47.838"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.836" endtime="20171117 16:52:47.838"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.838" endtime="20171117 16:52:47.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.839" endtime="20171117 16:52:47.839"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.838" endtime="20171117 16:52:47.839"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.820" endtime="20171117 16:52:47.839"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.820" endtime="20171117 16:52:47.840"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.818" endtime="20171117 16:52:47.840"></status>
</kw>
<kw name="${apiDict} = {'name': 'persistentvolumeclaims/status', 'singularName': '', 'namespaced': True, 'kind': 'PersistentVolumeClaim', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.840" level="INFO">${apiName} = persistentvolumeclaims/status</msg>
<status status="PASS" starttime="20171117 16:52:47.840" endtime="20171117 16:52:47.840"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.840" endtime="20171117 16:52:47.841"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.841" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:47.841" endtime="20171117 16:52:47.841"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.842" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:47.842" endtime="20171117 16:52:47.842"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>persistentvolumeclaims/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.844" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.844" endtime="20171117 16:52:47.844"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.848" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/persistentvolumeclaims/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.849" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.845" endtime="20171117 16:52:47.849"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.849" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.849" endtime="20171117 16:52:47.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.850" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.850" endtime="20171117 16:52:47.850"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.843" endtime="20171117 16:52:47.850"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.843" endtime="20171117 16:52:47.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.850" endtime="20171117 16:52:47.851"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.843" endtime="20171117 16:52:47.851"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.851" endtime="20171117 16:52:47.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.852" endtime="20171117 16:52:47.852"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.851" endtime="20171117 16:52:47.852"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.852" endtime="20171117 16:52:47.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.853" endtime="20171117 16:52:47.853"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.852" endtime="20171117 16:52:47.853"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.842" endtime="20171117 16:52:47.854"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.842" endtime="20171117 16:52:47.854"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.840" endtime="20171117 16:52:47.854"></status>
</kw>
<kw name="${apiDict} = {'name': 'persistentvolumes', 'singularName': '', 'namespaced': False, 'kind': 'PersistentVolume', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortN..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.854" level="INFO">${apiName} = persistentvolumes</msg>
<status status="PASS" starttime="20171117 16:52:47.854" endtime="20171117 16:52:47.854"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.855" endtime="20171117 16:52:47.855"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.855" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.855" endtime="20171117 16:52:47.855"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.856" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.856" endtime="20171117 16:52:47.856"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.857" endtime="20171117 16:52:47.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.857" endtime="20171117 16:52:47.858"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.857" endtime="20171117 16:52:47.858"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.858" endtime="20171117 16:52:47.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.859" endtime="20171117 16:52:47.859"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.858" endtime="20171117 16:52:47.859"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.860" endtime="20171117 16:52:47.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.860" endtime="20171117 16:52:47.861"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.859" endtime="20171117 16:52:47.861"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>persistentvolumes</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.862" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.862" endtime="20171117 16:52:47.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.867" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/persistentvolumes, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.863" endtime="20171117 16:52:47.867"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.868" level="INFO">${json} = {'kind': 'PersistentVolumeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/persistentvolumes', 'resourceVersion': '340778'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.867" endtime="20171117 16:52:47.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.868" level="INFO">{'kind': 'PersistentVolumeList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/persistentvolumes', 'resourceVersion': '340778'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:47.868" endtime="20171117 16:52:47.868"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.861" endtime="20171117 16:52:47.869"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.861" endtime="20171117 16:52:47.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.869" endtime="20171117 16:52:47.869"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.861" endtime="20171117 16:52:47.869"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.870" endtime="20171117 16:52:47.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.870" endtime="20171117 16:52:47.871"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.869" endtime="20171117 16:52:47.871"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.871" endtime="20171117 16:52:47.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.871" endtime="20171117 16:52:47.872"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.871" endtime="20171117 16:52:47.872"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.872" endtime="20171117 16:52:47.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.873" endtime="20171117 16:52:47.873"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.872" endtime="20171117 16:52:47.873"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.873" endtime="20171117 16:52:47.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.874" endtime="20171117 16:52:47.874"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.873" endtime="20171117 16:52:47.874"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.856" endtime="20171117 16:52:47.875"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.856" endtime="20171117 16:52:47.875"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.854" endtime="20171117 16:52:47.875"></status>
</kw>
<kw name="${apiDict} = {'name': 'persistentvolumes/status', 'singularName': '', 'namespaced': False, 'kind': 'PersistentVolume', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.875" level="INFO">${apiName} = persistentvolumes/status</msg>
<status status="PASS" starttime="20171117 16:52:47.875" endtime="20171117 16:52:47.875"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.876" endtime="20171117 16:52:47.876"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.876" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:47.876" endtime="20171117 16:52:47.876"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.877" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:47.877" endtime="20171117 16:52:47.877"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>persistentvolumes/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.879" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.879" endtime="20171117 16:52:47.880"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.884" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/persistentvolumes/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.884" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.880" endtime="20171117 16:52:47.884"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.885" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'persistentvolumes "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'persistentvo...</msg>
<status status="PASS" starttime="20171117 16:52:47.884" endtime="20171117 16:52:47.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.885" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'persistentvolumes "status" not found', 'reason': 'NotFound', 'details': {'name': 'status', 'kind': 'persistentvolumes'}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.885" endtime="20171117 16:52:47.886"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.878" endtime="20171117 16:52:47.886"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.878" endtime="20171117 16:52:47.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.886" endtime="20171117 16:52:47.886"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.878" endtime="20171117 16:52:47.887"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.887" endtime="20171117 16:52:47.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.887" endtime="20171117 16:52:47.888"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.887" endtime="20171117 16:52:47.888"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.888" endtime="20171117 16:52:47.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.889" endtime="20171117 16:52:47.889"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.888" endtime="20171117 16:52:47.889"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.877" endtime="20171117 16:52:47.889"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.877" endtime="20171117 16:52:47.889"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.875" endtime="20171117 16:52:47.889"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['po'], 'ca..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.890" level="INFO">${apiName} = pods</msg>
<status status="PASS" starttime="20171117 16:52:47.890" endtime="20171117 16:52:47.890"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.890" endtime="20171117 16:52:47.890"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.891" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'proxy', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.891" endtime="20171117 16:52:47.891"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.891" level="INFO">List length is 9 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: proxy
7: update
8: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.891" endtime="20171117 16:52:47.892"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.892" endtime="20171117 16:52:47.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.893" endtime="20171117 16:52:47.893"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.892" endtime="20171117 16:52:47.893"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.894" endtime="20171117 16:52:47.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.894" endtime="20171117 16:52:47.895"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.894" endtime="20171117 16:52:47.895"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.895" endtime="20171117 16:52:47.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.895" endtime="20171117 16:52:47.896"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.895" endtime="20171117 16:52:47.896"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>pods</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.897" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.897" endtime="20171117 16:52:47.898"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.905" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/pods, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.898" endtime="20171117 16:52:47.905"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.907" level="INFO">${json} = {'kind': 'PodList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/pods', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'hello-minikube-5d89cbb865-znjsc', 'generateName': 'hello...</msg>
<status status="PASS" starttime="20171117 16:52:47.906" endtime="20171117 16:52:47.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.908" level="INFO">{'kind': 'PodList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/pods', 'resourceVersion': '340778'}, 'items': [{'metadata': {'name': 'hello-minikube-5d89cbb865-znjsc', 'generateName': 'hello-minikube-5d89cbb865-', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/pods/hello-minikube-5d89cbb865-znjsc', 'uid': '689c1e52-c961-11e7-b342-5254002b24c6', 'resourceVersion': '605', 'creationTimestamp': '2017-11-14T17:29:46Z', 'labels': {'pod-template-hash': '1845766421', 'run': 'hello-minikube'}, 'annotations': {'kubernetes.io/created-by': '{"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"hello-minikube-5d89cbb865","uid":"689ac875-c961-11e7-b342-5254002b24c6","apiVersion":"extensions","resourceVersion":"554"}}\n'}, 'ownerReferences': [{'apiVersion': 'extensions/v1beta1', 'kind': 'ReplicaSet', 'name': 'hello-minikube-5d89cbb865', 'uid': '689ac875-c961-11e7-b342-5254002b24c6', 'controller': True, 'blockOwnerDeletion': True}]}, 'spec': {'volumes': [{'name': 'default-token-rpcgf', 'secret': {'secretName': 'default-token-rpcgf', 'defaultMode': 420}}], 'containers': [{'name': 'hello-minikube', 'image': 'gcr.io/google_containers/echoserver:1.4', 'ports': [{'containerPort': 8081, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'name': 'default-token-rpcgf', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler'}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:29:46Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:30:10Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:29:46Z'}], 'hostIP': '192.168.42.238', 'podIP': '172.17.0.6', 'startTime': '2017-11-14T17:29:46Z', 'containerStatuses': [{'name': 'hello-minikube', 'state': {'running': {'startedAt': '2017-11-14T17:30:09Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/echoserver:1.4', 'imageID': 'docker-pullable://gcr.io/google_containers/echoserver@sha256:5d99aa1120524c801bc8c1a7077e8f5ec122ba16b6dda1a5d3826057f67b9bcb', 'containerID': 'docker://f712d7e3f1f238583d3d97b073df8831c64cd3e30f669e72e32d10bdcea0c762'}], 'qosClass': 'BestEffort'}}, {'metadata': {'name': 'nginx', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/pods/nginx', 'uid': 'a643664d-cbe1-11e7-b342-5254002b24c6', 'resourceVersion': '340778', 'creationTimestamp': '2017-11-17T21:52:47Z', 'labels': {'name': 'nginx'}}, 'spec': {'volumes': [{'name': 'default-token-rpcgf', 'secret': {'secretName': 'default-token-rpcgf', 'defaultMode': 420}}], 'containers': [{'name': 'nginx', 'image': 'nginx', 'ports': [{'containerPort': 80, 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '500m', 'memory': '128Mi'}}, 'volumeMounts': [{'name': 'default-token-rpcgf', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler'}, 'status': {'phase': 'Pending', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-17T21:52:47Z'}, {'type': 'Ready', 'status': 'False', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-17T21:52:47Z', 'reason': 'ContainersNotReady', 'message': 'containers with unready status: [nginx]'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-17T21:52:47Z'}], 'hostIP': '192.168.42.238', 'startTime': '2017-11-17T21:52:47Z', 'containerStatuses': [{'name': 'nginx', 'state': {'waiting': {'reason': 'ContainerCreating'}}, 'lastState': {}, 'ready': False, 'restartCount': 0, 'image': 'nginx', 'imageID': ''}], 'qosClass': 'Guaranteed'}}, {'metadata': {'name': 'default-http-backend-vs9l5', 'generateName': 'default-http-backend-', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/pods/default-http-backend-vs9l5', 'uid': 'b7dcabb2-c960-11e7-b342-5254002b24c6', 'resourceVersion': '247', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'default-http-backend'}, 'annotations': {'kubernetes.io/created-by': '{"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicationController","namespace":"kube-system","name":"default-http-backend","uid":"b7d934de-c960-11e7-b342-5254002b24c6","apiVersion":"v1","resourceVersion":"94"}}\n'}, 'ownerReferences': [{'apiVersion': 'v1', 'kind': 'ReplicationController', 'name': 'default-http-backend', 'uid': 'b7d934de-c960-11e7-b342-5254002b24c6', 'controller': True, 'blockOwnerDeletion': True}]}, 'spec': {'volumes': [{'name': 'default-token-5kx28', 'secret': {'secretName': 'default-token-5kx28', 'defaultMode': 420}}], 'containers': [{'name': 'default-http-backend', 'image': 'gcr.io/google_containers/defaultbackend:1.3', 'ports': [{'containerPort': 8080, 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '10m', 'memory': '20Mi'}, 'requests': {'cpu': '10m', 'memory': '20Mi'}}, 'volumeMounts': [{'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 60, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler'}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:25:45Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}], 'hostIP': '192.168.42.238', 'podIP': '172.17.0.3', 'startTime': '2017-11-14T17:24:52Z', 'containerStatuses': [{'name': 'default-http-backend', 'state': {'running': {'startedAt': '2017-11-14T17:25:45Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/defaultbackend:1.3', 'imageID': 'docker-pullable://gcr.io/google_containers/defaultbackend@sha256:fb91f9395ddf44df1ca3adf68b25dcbc269e5d08ba14a40de9abdedafacf93d4', 'containerID': 'docker://3e5a0c9d4e582110ba02041e326f5a3a5c2c2316dd16266fb28d1c633baa4b62'}], 'qosClass': 'Guaranteed'}}, {'metadata': {'name': 'kube-addon-manager-minikube', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/pods/kube-addon-manager-minikube', 'uid': 'b5a5df5a-c960-11e7-b342-5254002b24c6', 'resourceVersion': '75', 'creationTimestamp': '2017-11-14T17:24:45Z', 'labels': {'component': 'kube-addon-manager', 'kubernetes.io/minikube-addons': 'addon-manager', 'version': 'v6.4'}, 'annotations': {'kubernetes.io/config.hash': '9831e93c3188555873fdb49f43198eef', 'kubernetes.io/config.mirror': '9831e93c3188555873fdb49f43198eef', 'kubernetes.io/config.seen': '2017-11-14T17:24:40.975447828Z', 'kubernetes.io/config.source': 'file'}}, 'spec': {'volumes': [{'name': 'addons', 'hostPath': {'path': '/etc/kubernetes/', 'type': ''}}, {'name': 'kubeconfig', 'hostPath': {'path': '/var/lib/localkube/', 'type': ''}}], 'containers': [{'name': 'kube-addon-manager', 'image': 'gcr.io/google-containers/kube-addon-manager:v6.4-beta.2', 'env': [{'name': 'KUBECONFIG', 'value': '/var/lib/localkube/kubeconfig'}], 'resources': {'requests': {'cpu': '5m', 'memory': '50Mi'}}, 'volumeMounts': [{'name': 'addons', 'readOnly': True, 'mountPath': '/etc/kubernetes/'}, {'name': 'kubeconfig', 'readOnly': True, 'mountPath': '/var/lib/localkube/'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeName': 'minikube', 'hostNetwork': True, 'securityContext': {}, 'schedulerName': 'default-scheduler', 'tolerations': [{'operator': 'Exists', 'effect': 'NoExecute'}]}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:45Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:46Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:45Z'}], 'hostIP': '192.168.42.238', 'podIP': '192.168.42.238', 'startTime': '2017-11-14T17:24:45Z', 'containerStatuses': [{'name': 'kube-addon-manager', 'state': {'running': {'startedAt': '2017-11-14T17:24:46Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google-containers/kube-addon-manager:v6.4-beta.2', 'imageID': 'docker://sha256:0a951668696f914e15e5fd2ef876fe7ea09596b4056f236eded5f5d8fc0bc395', 'containerID': 'docker://102b7a5f0d23f7326db8c559b38dad439f6338d5939fcc03ebf1954d271a7a7c'}], 'qosClass': 'Burstable'}}, {'metadata': {'name': 'kube-dns-6fc954457d-7gk8n', 'generateName': 'kube-dns-6fc954457d-', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/pods/kube-dns-6fc954457d-7gk8n', 'uid': 'b80a582f-c960-11e7-b342-5254002b24c6', 'resourceVersion': '183', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'k8s-app': 'kube-dns', 'pod-template-hash': '2975100138'}, 'annotations': {'kubernetes.io/created-by': '{"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"kube-system","name":"kube-dns-6fc954457d","uid":"b8096734-c960-11e7-b342-5254002b24c6","apiVersion":"extensions","resourceVersion":"115"}}\n', 'scheduler.alpha.kubernetes.io/critical-pod': ''}, 'ownerReferences': [{'apiVersion': 'extensions/v1beta1', 'kind': 'ReplicaSet', 'name': 'kube-dns-6fc954457d', 'uid': 'b8096734-c960-11e7-b342-5254002b24c6', 'controller': True, 'blockOwnerDeletion': True}]}, 'spec': {'volumes': [{'name': 'kube-dns-config', 'configMap': {'name': 'kube-dns', 'defaultMode': 420, 'optional': True}}, {'name': 'default-token-5kx28', 'secret': {'secretName': 'default-token-5kx28', 'defaultMode': 420}}], 'containers': [{'name': 'kubedns', 'image': 'gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5', 'args': ['--domain=cluster.local.', '--dns-port=10053', '--config-map=kube-dns', '--v=2'], 'ports': [{'name': 'dns-local', 'containerPort': 10053, 'protocol': 'UDP'}, {'name': 'dns-tcp-local', 'containerPort': 10053, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 10055, 'protocol': 'TCP'}], 'env': [{'name': 'PROMETHEUS_PORT', 'value': '10055'}], 'resources': {'limits': {'memory': '170Mi'}, 'requests': {'cpu': '100m', 'memory': '70Mi'}}, 'volumeMounts': [{'name': 'kube-dns-config', 'mountPath': '/kube-dns-config'}, {'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/healthcheck/kubedns', 'port': 10054, 'scheme': 'HTTP'}, 'initialDelaySeconds': 60, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 5}, 'readinessProbe': {'httpGet': {'path': '/readiness', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 3, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}, {'name': 'dnsmasq', 'image': 'gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5', 'args': ['-v=2', '-logtostderr', '-configDir=/etc/k8s/dns/dnsmasq-nanny', '-restartDnsmasq=true', '--', '-k', '--cache-size=1000', '--log-facility=-', '--server=/cluster.local/127.0.0.1#10053', '--server=/in-addr.arpa/127.0.0.1#10053', '--server=/ip6.arpa/127.0.0.1#10053'], 'ports': [{'name': 'dns', 'containerPort': 53, 'protocol': 'UDP'}, {'name': 'dns-tcp', 'containerPort': 53, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '150m', 'memory': '20Mi'}}, 'volumeMounts': [{'name': 'kube-dns-config', 'mountPath': '/etc/k8s/dns/dnsmasq-nanny'}, {'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/healthcheck/dnsmasq', 'port': 10054, 'scheme': 'HTTP'}, 'initialDelaySeconds': 60, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 5}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}, {'name': 'sidecar', 'image': 'gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5', 'args': ['--v=2', '--logtostderr', '--probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local.,5,A', '--probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local.,5,A'], 'ports': [{'name': 'metrics', 'containerPort': 10054, 'protocol': 'TCP'}], 'resources': {'requests': {'cpu': '10m', 'memory': '20Mi'}}, 'volumeMounts': [{'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/metrics', 'port': 10054, 'scheme': 'HTTP'}, 'initialDelaySeconds': 60, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 5}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'Default', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler', 'tolerations': [{'key': 'CriticalAddonsOnly', 'operator': 'Exists'}]}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:53Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:25:05Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}], 'hostIP': '192.168.42.238', 'podIP': '172.17.0.5', 'startTime': '2017-11-14T17:24:53Z', 'containerStatuses': [{'name': 'dnsmasq', 'state': {'running': {'startedAt': '2017-11-14T17:24:53Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5', 'imageID': 'docker://sha256:459944ce8cc4f08ebade5c05bb884e4da053d73e61ec6afe82a0b1687317254c', 'containerID': 'docker://b2143fe9904cdd53d097d8182b86186ec4c0ab9c8f777d7fa6abb7ba1788e518'}, {'name': 'kubedns', 'state': {'running': {'startedAt': '2017-11-14T17:24:53Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.5', 'imageID': 'docker://sha256:512cd7425a731bee1f2a3e4c825fc1cfe516c8b7905874f24bee6da12801d663', 'containerID': 'docker://04c81bf071602957d79d3d35225d8134c1369fac9c6e4d5207e5bececf417b1a'}, {'name': 'sidecar', 'state': {'running': {'startedAt': '2017-11-14T17:24:54Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.5', 'imageID': 'docker://sha256:fed89e8b4248a788655d528d96fe644aff012879c782784cd486ff6894ef89f6', 'containerID': 'docker://695fb83689fd2d7edaf2e56d72fbef0749ceccc64260a25697daffb7a32c5a5f'}], 'qosClass': 'Burstable'}}, {'metadata': {'name': 'kubernetes-dashboard-bjlxb', 'generateName': 'kubernetes-dashboard-', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/pods/kubernetes-dashboard-bjlxb', 'uid': 'b7b4005c-c960-11e7-b342-5254002b24c6', 'resourceVersion': '201', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'kubernetes-dashboard', 'version': 'v1.7.0'}, 'annotations': {'kubernetes.io/created-by': '{"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicationController","namespace":"kube-system","name":"kubernetes-dashboard","uid":"b7b3763a-c960-11e7-b342-5254002b24c6","apiVersion":"v1","resourceVersion":"80"}}\n'}, 'ownerReferences': [{'apiVersion': 'v1', 'kind': 'ReplicationController', 'name': 'kubernetes-dashboard', 'uid': 'b7b3763a-c960-11e7-b342-5254002b24c6', 'controller': True, 'blockOwnerDeletion': True}]}, 'spec': {'volumes': [{'name': 'default-token-5kx28', 'secret': {'secretName': 'default-token-5kx28', 'defaultMode': 420}}], 'containers': [{'name': 'kubernetes-dashboard', 'image': 'gcr.io/google_containers/kubernetes-dashboard-amd64:v1.7.0', 'ports': [{'containerPort': 9090, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/', 'port': 9090, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler'}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:25:15Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}], 'hostIP': '192.168.42.238', 'podIP': '172.17.0.2', 'startTime': '2017-11-14T17:24:52Z', 'containerStatuses': [{'name': 'kubernetes-dashboard', 'state': {'running': {'startedAt': '2017-11-14T17:25:14Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/kubernetes-dashboard-amd64:v1.7.0', 'imageID': 'docker-pullable://gcr.io/google_containers/kubernetes-dashboard-amd64@sha256:c94b57ce6849365033203a00ef5cfaaf92319bd5ff311a62b17cd9f6a3b69d83', 'containerID': 'docker://e7e4f3c8a8a2344b39946c0fae3b58415a76e8a0b264af5afeab0bb37250666a'}], 'qosClass': 'BestEffort'}}, {'metadata': {'name': 'nginx-ingress-controller-s8gnw', 'generateName': 'nginx-ingress-controller-', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/pods/nginx-ingress-controller-s8gnw', 'uid': 'b7e8dc49-c960-11e7-b342-5254002b24c6', 'resourceVersion': '260', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'nginx-ingress-controller', 'name': 'nginx-ingress-controller'}, 'annotations': {'kubernetes.io/created-by': '{"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicationController","namespace":"kube-system","name":"nginx-ingress-controller","uid":"b7e81a10-c960-11e7-b342-5254002b24c6","apiVersion":"v1","resourceVersion":"102"}}\n'}, 'ownerReferences': [{'apiVersion': 'v1', 'kind': 'ReplicationController', 'name': 'nginx-ingress-controller', 'uid': 'b7e81a10-c960-11e7-b342-5254002b24c6', 'controller': True, 'blockOwnerDeletion': True}]}, 'spec': {'volumes': [{'name': 'default-token-5kx28', 'secret': {'secretName': 'default-token-5kx28', 'defaultMode': 420}}], 'containers': [{'name': 'nginx-ingress-controller', 'image': 'gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15', 'args': ['/nginx-ingress-controller', '--default-backend-service=$(POD_NAMESPACE)/default-http-backend', '--configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf'], 'ports': [{'hostPort': 80, 'containerPort': 80, 'protocol': 'TCP'}, {'hostPort': 443, 'containerPort': 443, 'protocol': 'TCP'}, {'hostPort': 18080, 'containerPort': 18080, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}], 'resources': {}, 'volumeMounts': [{'name': 'default-token-5kx28', 'readOnly': True, 'mountPath': '/var/run/secrets/kubernetes.io/serviceaccount'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 60, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'nodeName': 'minikube', 'securityContext': {}, 'schedulerName': 'default-scheduler'}, 'status': {'phase': 'Running', 'conditions': [{'type': 'Initialized', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}, {'type': 'Ready', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:25:52Z'}, {'type': 'PodScheduled', 'status': 'True', 'lastProbeTime': None, 'lastTransitionTime': '2017-11-14T17:24:52Z'}], 'hostIP': '192.168.42.238', 'podIP': '172.17.0.4', 'startTime': '2017-11-14T17:24:52Z', 'containerStatuses': [{'name': 'nginx-ingress-controller', 'state': {'running': {'startedAt': '2017-11-14T17:25:40Z'}}, 'lastState': {}, 'ready': True, 'restartCount': 0, 'image': 'gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15', 'imageID': 'docker-pullable://gcr.io/google_containers/nginx-ingress-controller@sha256:1c64bc6dfb7ddbe4a0a9fce7f5c521aa13e7836c3b90601897b763add8494a41', 'containerID': 'docker://6fe21c70d046a37f175349c0cf2e033fe66619492b9a7f56f1e7278370140a37'}], 'qosClass': 'BestEffort'}}]}</msg>
<status status="PASS" starttime="20171117 16:52:47.908" endtime="20171117 16:52:47.909"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.897" endtime="20171117 16:52:47.909"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.896" endtime="20171117 16:52:47.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.909" endtime="20171117 16:52:47.910"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.896" endtime="20171117 16:52:47.910"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.910" endtime="20171117 16:52:47.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.910" endtime="20171117 16:52:47.911"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.910" endtime="20171117 16:52:47.911"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.911" endtime="20171117 16:52:47.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.912" endtime="20171117 16:52:47.912"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.911" endtime="20171117 16:52:47.912"></status>
</kw>
<kw name="${apiverb} = proxy" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.912" endtime="20171117 16:52:47.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.913" endtime="20171117 16:52:47.913"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.912" endtime="20171117 16:52:47.913"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.914" endtime="20171117 16:52:47.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.914" endtime="20171117 16:52:47.915"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.914" endtime="20171117 16:52:47.915"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.915" endtime="20171117 16:52:47.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.916" endtime="20171117 16:52:47.916"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.915" endtime="20171117 16:52:47.916"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.892" endtime="20171117 16:52:47.916"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.892" endtime="20171117 16:52:47.916"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.889" endtime="20171117 16:52:47.916"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/attach', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.917" level="INFO">${apiName} = pods/attach</msg>
<status status="PASS" starttime="20171117 16:52:47.916" endtime="20171117 16:52:47.917"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.917" endtime="20171117 16:52:47.917"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.918" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:47.917" endtime="20171117 16:52:47.918"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.918" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:47.918" endtime="20171117 16:52:47.918"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:47.919" endtime="20171117 16:52:47.919"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.918" endtime="20171117 16:52:47.919"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.916" endtime="20171117 16:52:47.919"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/binding', 'singularName': '', 'namespaced': True, 'kind': 'Binding', 'verbs': ['create']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.920" level="INFO">${apiName} = pods/binding</msg>
<status status="PASS" starttime="20171117 16:52:47.919" endtime="20171117 16:52:47.920"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.920" endtime="20171117 16:52:47.920"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.921" level="INFO">${apiVerbs} = ['create']</msg>
<status status="PASS" starttime="20171117 16:52:47.921" endtime="20171117 16:52:47.921"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.921" level="INFO">List has one item:
create</msg>
<status status="PASS" starttime="20171117 16:52:47.921" endtime="20171117 16:52:47.921"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.922" endtime="20171117 16:52:47.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.923" endtime="20171117 16:52:47.923"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.922" endtime="20171117 16:52:47.923"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.922" endtime="20171117 16:52:47.923"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.922" endtime="20171117 16:52:47.924"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.919" endtime="20171117 16:52:47.924"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/eviction', 'singularName': '', 'namespaced': True, 'kind': 'Eviction', 'verbs': ['create']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.924" level="INFO">${apiName} = pods/eviction</msg>
<status status="PASS" starttime="20171117 16:52:47.924" endtime="20171117 16:52:47.924"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.924" endtime="20171117 16:52:47.925"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.925" level="INFO">${apiVerbs} = ['create']</msg>
<status status="PASS" starttime="20171117 16:52:47.925" endtime="20171117 16:52:47.925"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.926" level="INFO">List has one item:
create</msg>
<status status="PASS" starttime="20171117 16:52:47.925" endtime="20171117 16:52:47.926"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.928" endtime="20171117 16:52:47.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.928" endtime="20171117 16:52:47.929"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.927" endtime="20171117 16:52:47.929"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.927" endtime="20171117 16:52:47.929"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.926" endtime="20171117 16:52:47.929"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.924" endtime="20171117 16:52:47.929"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/exec', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.929" level="INFO">${apiName} = pods/exec</msg>
<status status="PASS" starttime="20171117 16:52:47.929" endtime="20171117 16:52:47.929"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.930" endtime="20171117 16:52:47.930"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.930" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:47.930" endtime="20171117 16:52:47.931"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.931" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:47.931" endtime="20171117 16:52:47.931"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:47.932" endtime="20171117 16:52:47.932"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.931" endtime="20171117 16:52:47.932"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.929" endtime="20171117 16:52:47.932"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/log', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['get']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.932" level="INFO">${apiName} = pods/log</msg>
<status status="PASS" starttime="20171117 16:52:47.932" endtime="20171117 16:52:47.933"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.933" endtime="20171117 16:52:47.933"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.934" level="INFO">${apiVerbs} = ['get']</msg>
<status status="PASS" starttime="20171117 16:52:47.933" endtime="20171117 16:52:47.934"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.934" level="INFO">List has one item:
get</msg>
<status status="PASS" starttime="20171117 16:52:47.934" endtime="20171117 16:52:47.934"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>pods/log</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.936" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.936" endtime="20171117 16:52:47.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.947" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/pods/log, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.948" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.937" endtime="20171117 16:52:47.948"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.949" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.948" endtime="20171117 16:52:47.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.949" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.949" endtime="20171117 16:52:47.949"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.935" endtime="20171117 16:52:47.949"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.935" endtime="20171117 16:52:47.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.950" endtime="20171117 16:52:47.950"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.935" endtime="20171117 16:52:47.950"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.935" endtime="20171117 16:52:47.950"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.934" endtime="20171117 16:52:47.950"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.932" endtime="20171117 16:52:47.950"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/portforward', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.951" level="INFO">${apiName} = pods/portforward</msg>
<status status="PASS" starttime="20171117 16:52:47.951" endtime="20171117 16:52:47.951"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.951" endtime="20171117 16:52:47.952"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.952" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:47.952" endtime="20171117 16:52:47.952"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.953" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:47.952" endtime="20171117 16:52:47.953"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:47.953" endtime="20171117 16:52:47.969"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.953" endtime="20171117 16:52:47.969"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.951" endtime="20171117 16:52:47.969"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/proxy', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.970" level="INFO">${apiName} = pods/proxy</msg>
<status status="PASS" starttime="20171117 16:52:47.970" endtime="20171117 16:52:47.970"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.970" endtime="20171117 16:52:47.971"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.971" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:47.971" endtime="20171117 16:52:47.971"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.972" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:47.972" endtime="20171117 16:52:47.972"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:47.973" endtime="20171117 16:52:47.973"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.972" endtime="20171117 16:52:47.973"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.970" endtime="20171117 16:52:47.973"></status>
</kw>
<kw name="${apiDict} = {'name': 'pods/status', 'singularName': '', 'namespaced': True, 'kind': 'Pod', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.974" level="INFO">${apiName} = pods/status</msg>
<status status="PASS" starttime="20171117 16:52:47.973" endtime="20171117 16:52:47.974"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.974" endtime="20171117 16:52:47.974"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.975" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:47.974" endtime="20171117 16:52:47.975"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.975" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:47.975" endtime="20171117 16:52:47.975"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>pods/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.978" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.977" endtime="20171117 16:52:47.978"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:47.983" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/pods/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:47.983" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.978" endtime="20171117 16:52:47.983"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:47.984" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.983" endtime="20171117 16:52:47.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.984" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:47.984" endtime="20171117 16:52:47.984"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.977" endtime="20171117 16:52:47.985"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.976" endtime="20171117 16:52:47.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.985" endtime="20171117 16:52:47.985"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.976" endtime="20171117 16:52:47.985"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.986" endtime="20171117 16:52:47.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.986" endtime="20171117 16:52:47.987"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.986" endtime="20171117 16:52:47.987"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.987" endtime="20171117 16:52:47.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.988" endtime="20171117 16:52:47.988"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.987" endtime="20171117 16:52:47.988"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.976" endtime="20171117 16:52:47.988"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.975" endtime="20171117 16:52:47.988"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.973" endtime="20171117 16:52:47.988"></status>
</kw>
<kw name="${apiDict} = {'name': 'podtemplates', 'singularName': '', 'namespaced': True, 'kind': 'PodTemplate', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:47.989" level="INFO">${apiName} = podtemplates</msg>
<status status="PASS" starttime="20171117 16:52:47.989" endtime="20171117 16:52:47.989"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.989" endtime="20171117 16:52:47.990"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:47.990" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:47.990" endtime="20171117 16:52:47.990"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.991" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:47.990" endtime="20171117 16:52:47.991"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.992" endtime="20171117 16:52:47.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.992" endtime="20171117 16:52:47.993"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.992" endtime="20171117 16:52:47.993"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.993" endtime="20171117 16:52:47.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.994" endtime="20171117 16:52:47.994"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.993" endtime="20171117 16:52:47.994"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.995" endtime="20171117 16:52:47.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:47.995" endtime="20171117 16:52:47.996"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.994" endtime="20171117 16:52:47.996"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>podtemplates</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:47.997" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:47.997" endtime="20171117 16:52:47.998"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.002" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/podtemplates, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:47.998" endtime="20171117 16:52:48.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.003" level="INFO">${json} = {'kind': 'PodTemplateList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/podtemplates', 'resourceVersion': '340779'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:48.003" endtime="20171117 16:52:48.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.004" level="INFO">{'kind': 'PodTemplateList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/podtemplates', 'resourceVersion': '340779'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:48.003" endtime="20171117 16:52:48.004"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.996" endtime="20171117 16:52:48.004"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.996" endtime="20171117 16:52:48.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.004" endtime="20171117 16:52:48.005"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.996" endtime="20171117 16:52:48.005"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.005" endtime="20171117 16:52:48.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.005" endtime="20171117 16:52:48.006"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.005" endtime="20171117 16:52:48.006"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.006" endtime="20171117 16:52:48.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.007" endtime="20171117 16:52:48.007"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.006" endtime="20171117 16:52:48.007"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.008" endtime="20171117 16:52:48.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.008" endtime="20171117 16:52:48.009"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.007" endtime="20171117 16:52:48.009"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.009" endtime="20171117 16:52:48.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.010" endtime="20171117 16:52:48.010"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.009" endtime="20171117 16:52:48.010"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.991" endtime="20171117 16:52:48.010"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.991" endtime="20171117 16:52:48.010"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.989" endtime="20171117 16:52:48.011"></status>
</kw>
<kw name="${apiDict} = {'name': 'replicationcontrollers', 'singularName': '', 'namespaced': True, 'kind': 'ReplicationController', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.011" level="INFO">${apiName} = replicationcontrollers</msg>
<status status="PASS" starttime="20171117 16:52:48.011" endtime="20171117 16:52:48.011"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.011" endtime="20171117 16:52:48.012"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.012" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:48.012" endtime="20171117 16:52:48.012"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.013" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:48.013" endtime="20171117 16:52:48.013"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.014" endtime="20171117 16:52:48.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.014" endtime="20171117 16:52:48.015"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.014" endtime="20171117 16:52:48.015"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.015" endtime="20171117 16:52:48.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.016" endtime="20171117 16:52:48.016"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.015" endtime="20171117 16:52:48.016"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.016" endtime="20171117 16:52:48.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.017" endtime="20171117 16:52:48.017"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.016" endtime="20171117 16:52:48.017"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>replicationcontrollers</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.019" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.019" endtime="20171117 16:52:48.019"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.025" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/replicationcontrollers, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.020" endtime="20171117 16:52:48.025"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.026" level="INFO">${json} = {'kind': 'ReplicationControllerList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/replicationcontrollers', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default-http-backend...</msg>
<status status="PASS" starttime="20171117 16:52:48.025" endtime="20171117 16:52:48.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.027" level="INFO">{'kind': 'ReplicationControllerList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/replicationcontrollers', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default-http-backend', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/replicationcontrollers/default-http-backend', 'uid': 'b7d934de-c960-11e7-b342-5254002b24c6', 'resourceVersion': '249', 'generation': 1, 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile"},"name":"default-http-backend","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"default-http-backend"},"template":{"metadata":{"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"default-http-backend"}},"spec":{"containers":[{"image":"gcr.io/google_containers/defaultbackend:1.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":8080,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":5},"name":"default-http-backend","ports":[{"containerPort":8080}],"resources":{"limits":{"cpu":"10m","memory":"20Mi"},"requests":{"cpu":"10m","memory":"20Mi"}}}],"terminationGracePeriodSeconds":60}}}}\n'}}, 'spec': {'replicas': 1, 'selector': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'default-http-backend'}, 'template': {'metadata': {'creationTimestamp': None, 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'default-http-backend'}}, 'spec': {'containers': [{'name': 'default-http-backend', 'image': 'gcr.io/google_containers/defaultbackend:1.3', 'ports': [{'containerPort': 8080, 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '10m', 'memory': '20Mi'}, 'requests': {'cpu': '10m', 'memory': '20Mi'}}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 60, 'dnsPolicy': 'ClusterFirst', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}}, 'status': {'replicas': 1, 'fullyLabeledReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'observedGeneration': 1}}, {'metadata': {'name': 'kubernetes-dashboard', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/replicationcontrollers/kubernetes-dashboard', 'uid': 'b7b3763a-c960-11e7-b342-5254002b24c6', 'resourceVersion': '202', 'generation': 1, 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'kubernetes.io/minikube-addons': 'dashboard', 'version': 'v1.7.0'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/minikube-addons":"dashboard","version":"v1.7.0"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"kubernetes-dashboard","version":"v1.7.0"},"template":{"metadata":{"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"kubernetes-dashboard","version":"v1.7.0"}},"spec":{"containers":[{"image":"gcr.io/google_containers/kubernetes-dashboard-amd64:v1.7.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":9090,"protocol":"TCP"}]}]}}}}\n'}}, 'spec': {'replicas': 1, 'selector': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'kubernetes-dashboard', 'version': 'v1.7.0'}, 'template': {'metadata': {'creationTimestamp': None, 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'kubernetes-dashboard', 'version': 'v1.7.0'}}, 'spec': {'containers': [{'name': 'kubernetes-dashboard', 'image': 'gcr.io/google_containers/kubernetes-dashboard-amd64:v1.7.0', 'ports': [{'containerPort': 9090, 'protocol': 'TCP'}], 'resources': {}, 'livenessProbe': {'httpGet': {'path': '/', 'port': 9090, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 30, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}}, 'status': {'replicas': 1, 'fullyLabeledReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'observedGeneration': 1}}, {'metadata': {'name': 'nginx-ingress-controller', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/replicationcontrollers/nginx-ingress-controller', 'uid': 'b7e81a10-c960-11e7-b342-5254002b24c6', 'resourceVersion': '261', 'generation': 1, 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'nginx-ingress-controller'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"nginx-ingress-controller"},"name":"nginx-ingress-controller","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"nginx-ingress-controller"},"template":{"metadata":{"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"nginx-ingress-controller","name":"nginx-ingress-controller"}},"spec":{"containers":[{"args":["/nginx-ingress-controller","--default-backend-service=$(POD_NAMESPACE)/default-http-backend","--configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"timeoutSeconds":1},"name":"nginx-ingress-controller","ports":[{"containerPort":80,"hostPort":80},{"containerPort":443,"hostPort":443},{"containerPort":18080,"hostPort":18080}],"readinessProbe":{"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"}}}],"terminationGracePeriodSeconds":60}}}}\n'}}, 'spec': {'replicas': 1, 'selector': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'nginx-ingress-controller'}, 'template': {'metadata': {'creationTimestamp': None, 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'nginx-ingress-controller', 'name': 'nginx-ingress-controller'}}, 'spec': {'containers': [{'name': 'nginx-ingress-controller', 'image': 'gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15', 'args': ['/nginx-ingress-controller', '--default-backend-service=$(POD_NAMESPACE)/default-http-backend', '--configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf'], 'ports': [{'hostPort': 80, 'containerPort': 80, 'protocol': 'TCP'}, {'hostPort': 443, 'containerPort': 443, 'protocol': 'TCP'}, {'hostPort': 18080, 'containerPort': 18080, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}], 'resources': {}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 10254, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 60, 'dnsPolicy': 'ClusterFirst', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}}, 'status': {'replicas': 1, 'fullyLabeledReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'observedGeneration': 1}}]}</msg>
<status status="PASS" starttime="20171117 16:52:48.026" endtime="20171117 16:52:48.027"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.018" endtime="20171117 16:52:48.027"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.018" endtime="20171117 16:52:48.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.027" endtime="20171117 16:52:48.028"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.018" endtime="20171117 16:52:48.028"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.028" endtime="20171117 16:52:48.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.029" endtime="20171117 16:52:48.029"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.028" endtime="20171117 16:52:48.029"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.030" endtime="20171117 16:52:48.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.030" endtime="20171117 16:52:48.031"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.029" endtime="20171117 16:52:48.031"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.031" endtime="20171117 16:52:48.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.031" endtime="20171117 16:52:48.032"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.031" endtime="20171117 16:52:48.032"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.032" endtime="20171117 16:52:48.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.033" endtime="20171117 16:52:48.034"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.032" endtime="20171117 16:52:48.034"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.013" endtime="20171117 16:52:48.034"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.013" endtime="20171117 16:52:48.034"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.011" endtime="20171117 16:52:48.034"></status>
</kw>
<kw name="${apiDict} = {'name': 'replicationcontrollers/scale', 'singularName': '', 'namespaced': True, 'group': 'autoscaling', 'version': 'v1', 'kind': 'Scale', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.035" level="INFO">${apiName} = replicationcontrollers/scale</msg>
<status status="PASS" starttime="20171117 16:52:48.034" endtime="20171117 16:52:48.035"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.035" endtime="20171117 16:52:48.035"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.036" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:48.035" endtime="20171117 16:52:48.036"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.036" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:48.036" endtime="20171117 16:52:48.036"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>replicationcontrollers/scale</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.038" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.038" endtime="20171117 16:52:48.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.043" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/replicationcontrollers/scale, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.043" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.039" endtime="20171117 16:52:48.043"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.044" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.043" endtime="20171117 16:52:48.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.045" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.044" endtime="20171117 16:52:48.045"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.038" endtime="20171117 16:52:48.045"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.037" endtime="20171117 16:52:48.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.045" endtime="20171117 16:52:48.046"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.037" endtime="20171117 16:52:48.046"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.046" endtime="20171117 16:52:48.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.047" endtime="20171117 16:52:48.047"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.046" endtime="20171117 16:52:48.047"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.047" endtime="20171117 16:52:48.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.048" endtime="20171117 16:52:48.048"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.047" endtime="20171117 16:52:48.049"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.037" endtime="20171117 16:52:48.049"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.036" endtime="20171117 16:52:48.049"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.034" endtime="20171117 16:52:48.049"></status>
</kw>
<kw name="${apiDict} = {'name': 'replicationcontrollers/status', 'singularName': '', 'namespaced': True, 'kind': 'ReplicationController', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.049" level="INFO">${apiName} = replicationcontrollers/status</msg>
<status status="PASS" starttime="20171117 16:52:48.049" endtime="20171117 16:52:48.049"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.050" endtime="20171117 16:52:48.050"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.050" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:48.050" endtime="20171117 16:52:48.051"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.051" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:48.051" endtime="20171117 16:52:48.051"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>replicationcontrollers/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.054" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.053" endtime="20171117 16:52:48.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.058" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/replicationcontrollers/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.058" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.054" endtime="20171117 16:52:48.058"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.059" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.058" endtime="20171117 16:52:48.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.059" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.059" endtime="20171117 16:52:48.059"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.053" endtime="20171117 16:52:48.060"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.052" endtime="20171117 16:52:48.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.060" endtime="20171117 16:52:48.060"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.052" endtime="20171117 16:52:48.060"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.061" endtime="20171117 16:52:48.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.061" endtime="20171117 16:52:48.062"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.060" endtime="20171117 16:52:48.062"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.062" endtime="20171117 16:52:48.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.062" endtime="20171117 16:52:48.063"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.062" endtime="20171117 16:52:48.063"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.052" endtime="20171117 16:52:48.063"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.051" endtime="20171117 16:52:48.063"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.049" endtime="20171117 16:52:48.063"></status>
</kw>
<kw name="${apiDict} = {'name': 'resourcequotas', 'singularName': '', 'namespaced': True, 'kind': 'ResourceQuota', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames': ..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.064" level="INFO">${apiName} = resourcequotas</msg>
<status status="PASS" starttime="20171117 16:52:48.063" endtime="20171117 16:52:48.064"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.064" endtime="20171117 16:52:48.064"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.065" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:48.064" endtime="20171117 16:52:48.065"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.065" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:48.065" endtime="20171117 16:52:48.065"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.066" endtime="20171117 16:52:48.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.067" endtime="20171117 16:52:48.067"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.066" endtime="20171117 16:52:48.067"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.068" endtime="20171117 16:52:48.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.068" endtime="20171117 16:52:48.069"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.067" endtime="20171117 16:52:48.069"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.069" endtime="20171117 16:52:48.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.069" endtime="20171117 16:52:48.070"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.069" endtime="20171117 16:52:48.070"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>resourcequotas</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.071" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.071" endtime="20171117 16:52:48.072"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.077" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/resourcequotas, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.072" endtime="20171117 16:52:48.078"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.079" level="INFO">${json} = {'kind': 'ResourceQuotaList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/resourcequotas', 'resourceVersion': '340779'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:48.078" endtime="20171117 16:52:48.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.079" level="INFO">{'kind': 'ResourceQuotaList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/resourcequotas', 'resourceVersion': '340779'}, 'items': []}</msg>
<status status="PASS" starttime="20171117 16:52:48.079" endtime="20171117 16:52:48.079"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.071" endtime="20171117 16:52:48.080"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.070" endtime="20171117 16:52:48.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.080" endtime="20171117 16:52:48.080"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.070" endtime="20171117 16:52:48.080"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.081" endtime="20171117 16:52:48.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.081" endtime="20171117 16:52:48.082"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.081" endtime="20171117 16:52:48.082"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.082" endtime="20171117 16:52:48.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.083" endtime="20171117 16:52:48.084"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.082" endtime="20171117 16:52:48.084"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.084" endtime="20171117 16:52:48.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.085" endtime="20171117 16:52:48.085"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.084" endtime="20171117 16:52:48.086"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.086" endtime="20171117 16:52:48.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.087" endtime="20171117 16:52:48.087"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.086" endtime="20171117 16:52:48.087"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.066" endtime="20171117 16:52:48.087"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.065" endtime="20171117 16:52:48.087"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.063" endtime="20171117 16:52:48.087"></status>
</kw>
<kw name="${apiDict} = {'name': 'resourcequotas/status', 'singularName': '', 'namespaced': True, 'kind': 'ResourceQuota', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.088" level="INFO">${apiName} = resourcequotas/status</msg>
<status status="PASS" starttime="20171117 16:52:48.088" endtime="20171117 16:52:48.088"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.089" endtime="20171117 16:52:48.089"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.090" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:48.089" endtime="20171117 16:52:48.090"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.091" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:48.090" endtime="20171117 16:52:48.091"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>resourcequotas/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.095" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.095" endtime="20171117 16:52:48.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.101" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/resourcequotas/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.101" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.096" endtime="20171117 16:52:48.101"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.102" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.101" endtime="20171117 16:52:48.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.102" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.102" endtime="20171117 16:52:48.102"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.094" endtime="20171117 16:52:48.102"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.093" endtime="20171117 16:52:48.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.103" endtime="20171117 16:52:48.103"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.093" endtime="20171117 16:52:48.103"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.104" endtime="20171117 16:52:48.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.104" endtime="20171117 16:52:48.105"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.103" endtime="20171117 16:52:48.105"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.105" endtime="20171117 16:52:48.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.105" endtime="20171117 16:52:48.106"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.105" endtime="20171117 16:52:48.106"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.092" endtime="20171117 16:52:48.106"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.091" endtime="20171117 16:52:48.106"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.088" endtime="20171117 16:52:48.106"></status>
</kw>
<kw name="${apiDict} = {'name': 'secrets', 'singularName': '', 'namespaced': True, 'kind': 'Secret', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.107" level="INFO">${apiName} = secrets</msg>
<status status="PASS" starttime="20171117 16:52:48.106" endtime="20171117 16:52:48.107"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.107" endtime="20171117 16:52:48.107"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.108" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:48.107" endtime="20171117 16:52:48.108"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.108" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:48.108" endtime="20171117 16:52:48.108"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.110" endtime="20171117 16:52:48.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.110" endtime="20171117 16:52:48.111"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.109" endtime="20171117 16:52:48.111"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.111" endtime="20171117 16:52:48.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.112" endtime="20171117 16:52:48.112"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.111" endtime="20171117 16:52:48.112"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.112" endtime="20171117 16:52:48.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.113" endtime="20171117 16:52:48.113"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.112" endtime="20171117 16:52:48.113"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>secrets</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.115" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.115" endtime="20171117 16:52:48.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.120" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/secrets, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.116" endtime="20171117 16:52:48.121"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.121" level="INFO">${json} = {'kind': 'SecretList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/secrets', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default-token-rpcgf', 'namespace': 'default', 'sel...</msg>
<status status="PASS" starttime="20171117 16:52:48.121" endtime="20171117 16:52:48.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.122" level="INFO">{'kind': 'SecretList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/secrets', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default-token-rpcgf', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/secrets/default-token-rpcgf', 'uid': 'b175a8a7-c960-11e7-b342-5254002b24c6', 'resourceVersion': '40', 'creationTimestamp': '2017-11-14T17:24:38Z', 'annotations': {'kubernetes.io/service-account.name': 'default', 'kubernetes.io/service-account.uid': 'b1739fec-c960-11e7-b342-5254002b24c6'}}, 'data': {'ca.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRFM01UQXpNREl3TkRBMU5Gb1hEVEkzTVRBeU9ESXdOREExTkZvd0ZURVRNQkVHQTFVRQpBeE1LYldsdWFXdDFZbVZEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0hvCmYxS1oyd1hFZVNlZ1BCcndGVnRFSy9iS2YxNUdZSmJsdWIxcmhUWStsZWdZdi9pWmpaMi9IcEh1NHFRYXVOUngKRXd1ZXB4QU5HVFFlQy9La0ZPbFo0TGpQeFh6TVpYbllsSU1tamNkcTJnbHVyRjRjSU9nYkN5VkZiNkJhdDVJYgpiT1g0OE92L0t0SGx5Wjd3Y2FHN0I2cHVLbjRuSEloSFVMZmEzSUg3N1lMMUkxdS9VT09MZlZ6bEdDaGpuOGRZClErKytGN2hFSnp0Tnp1LzY2UlI2eGFhb2hpMGMyZThUdnZZYjlXMjk4N0hKRC9BUW9BWGRVVlI2bFZPTVVTaEcKN0VCcUdyK092OEhjL2svV1JNRGFSSzFBdFZhbmFUaURoUnRSM2lJMlphWS9EMVl6ODU4RVpvczJyM1RVQStKaAppWnNtZWZOSndHNVpSbm42V3AwQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBZkRVWlcrV0crbEZ1cC9pZnZzSkh5Sm82aGxaNnZ6K0E0NkpIY1FuaC8vaU1qQVdwTwp2N0xqNFNkRUdZcnhmV3FGcER3M0N4ZFVpelI3T0NXTnlkNXVSOVlKejMrdUdJbjlwNEJOOExsdExiT3lZMEFkCmh2cllxbzFEV2xkWE0zbjN4c085YjRoVVlvcEprazI5UkdMRW9nOGF1RGdWZkpadVhYYnJ1L09FOGtNTWRLVUcKcGhKbVgzK0JVUzgzSjFKSHVIOFIwRzFxVmw0aEgzSitDQ1VESDVvaW9ya2R3ZzMvZkIvTG02YmxCV3h5NU14ZwpRclhZQUxtekZ5aVp4UkFCcS8xM25WcDBzaDU3ZWMvSlI2aFRqLzQ1MFhuK085L0hnT2VKQnZLV0MwM3VDSzlmCkREUHp1M0RCUjZTdGJySlhWVW5SUk9IR3FBTnhWMmJrblJjYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 'namespace': 'ZGVmYXVsdA==', 'token': 'ZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbVJsWm1GMWJIUXRkRzlyWlc0dGNuQmpaMllpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pWkdWbVlYVnNkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbUl4TnpNNVptVmpMV001TmpBdE1URmxOeTFpTXpReUxUVXlOVFF3TURKaU1qUmpOaUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21SbFptRjFiSFFpZlEueW1rcEtLRndtS2F6ZnAyR0pHLUdZY1hnVGFmWmxsTnpHc2ZzQ1JlRFZlbGRwN2RINXVYVDg2aEJRSXgzWGhrLXFBdEJxUE5Xa0NyWDJWUTg3ZXNjMmJxRkd3dXlTU21pMVFrSUlZdm93b1VsWUJlb3hMeXR2ai1nNVVxWGdGMFJpbF8xeXI4ckwxVl9lNC1yOEkxTmhXb0pKUUlScmVRTnNjdmxLWXdqZDcyYVZ5WTdUc0VJUGxXMmQzVzJueTJ1SnpwemVDbVBQVGt1emNld1FHS29qSmI4eXkyZC1NOXpBMmVYc3ZjT3Myb2FMcHJENFNIeWRnWWRBOUp3d0J3SmJhazZRcXVVbmZIQkd1OFl6SkVvUFViNWVkUkhiZmpjTXlCVXdJV2pua2JST09oU0NyT0dHM1FYcGRBWFFfS0tDMUY5aWFRRHByYk0xNHdJb0gwLTh3'}, 'type': 'kubernetes.io/service-account-token'}, {'metadata': {'name': 'default-token-kf5d9', 'namespace': 'kube-public', 'selfLink': '/api/v1/namespaces/kube-public/secrets/default-token-kf5d9', 'uid': 'b176e6e9-c960-11e7-b342-5254002b24c6', 'resourceVersion': '44', 'creationTimestamp': '2017-11-14T17:24:38Z', 'annotations': {'kubernetes.io/service-account.name': 'default', 'kubernetes.io/service-account.uid': 'b174d07e-c960-11e7-b342-5254002b24c6'}}, 'data': {'ca.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRFM01UQXpNREl3TkRBMU5Gb1hEVEkzTVRBeU9ESXdOREExTkZvd0ZURVRNQkVHQTFVRQpBeE1LYldsdWFXdDFZbVZEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0hvCmYxS1oyd1hFZVNlZ1BCcndGVnRFSy9iS2YxNUdZSmJsdWIxcmhUWStsZWdZdi9pWmpaMi9IcEh1NHFRYXVOUngKRXd1ZXB4QU5HVFFlQy9La0ZPbFo0TGpQeFh6TVpYbllsSU1tamNkcTJnbHVyRjRjSU9nYkN5VkZiNkJhdDVJYgpiT1g0OE92L0t0SGx5Wjd3Y2FHN0I2cHVLbjRuSEloSFVMZmEzSUg3N1lMMUkxdS9VT09MZlZ6bEdDaGpuOGRZClErKytGN2hFSnp0Tnp1LzY2UlI2eGFhb2hpMGMyZThUdnZZYjlXMjk4N0hKRC9BUW9BWGRVVlI2bFZPTVVTaEcKN0VCcUdyK092OEhjL2svV1JNRGFSSzFBdFZhbmFUaURoUnRSM2lJMlphWS9EMVl6ODU4RVpvczJyM1RVQStKaAppWnNtZWZOSndHNVpSbm42V3AwQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBZkRVWlcrV0crbEZ1cC9pZnZzSkh5Sm82aGxaNnZ6K0E0NkpIY1FuaC8vaU1qQVdwTwp2N0xqNFNkRUdZcnhmV3FGcER3M0N4ZFVpelI3T0NXTnlkNXVSOVlKejMrdUdJbjlwNEJOOExsdExiT3lZMEFkCmh2cllxbzFEV2xkWE0zbjN4c085YjRoVVlvcEprazI5UkdMRW9nOGF1RGdWZkpadVhYYnJ1L09FOGtNTWRLVUcKcGhKbVgzK0JVUzgzSjFKSHVIOFIwRzFxVmw0aEgzSitDQ1VESDVvaW9ya2R3ZzMvZkIvTG02YmxCV3h5NU14ZwpRclhZQUxtekZ5aVp4UkFCcS8xM25WcDBzaDU3ZWMvSlI2aFRqLzQ1MFhuK085L0hnT2VKQnZLV0MwM3VDSzlmCkREUHp1M0RCUjZTdGJySlhWVW5SUk9IR3FBTnhWMmJrblJjYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 'namespace': 'a3ViZS1wdWJsaWM=', 'token': 'ZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbExYQjFZbXhwWXlJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pXWmhkV3gwTFhSdmEyVnVMV3RtTldRNUlpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltUmxabUYxYkhRaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lKaU1UYzBaREEzWlMxak9UWXdMVEV4WlRjdFlqTTBNaTAxTWpVME1EQXlZakkwWXpZaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhM1ZpWlMxd2RXSnNhV002WkdWbVlYVnNkQ0o5LmItTXAzdFdTVnBOMW16YUQ5d1A3akpWcWVSMzBBRnY1YlVRSmYwZU82WmVNdU1DSlBieGVjOUtiNkdpWHZhdW9zaVZLb2N5RGJ5VDRMUURqeW5OYXI0Qi1WOVhHaTBuQnR1MTZpZ0kwM1poTUxrbmVRMWMwZG04Q3A3Y0g3eXpuYlFTZnpiRzIyMHdpWFNVSG5tT2JPTkIwRURXQ2Zza1lJZ3VieGVrS3d5ZTNtX3JyQ2oyOThXaVVWTFhCRy00TnVmVm5YeEkwWTNVVHFTVUF4NThoQk1PejFMS05fQkQ0aUJKZDNaRWFLZDBLaFlfbDUtbjR1c0FYMDBYdkd5ZDAxbGJXNGY3VGwzY3NkM2gybUpoVTJyeEd0d3JvSXQwUHpmWFhrcWlRamRlYUoxNEJYcVZiVGotb1FscFAtczFXRVFCcXlVbnlwSXBYdmkyOHprQjFGdw=='}, 'type': 'kubernetes.io/service-account-token'}, {'metadata': {'name': 'default-token-5kx28', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/secrets/default-token-5kx28', 'uid': 'b17678f8-c960-11e7-b342-5254002b24c6', 'resourceVersion': '42', 'creationTimestamp': '2017-11-14T17:24:38Z', 'annotations': {'kubernetes.io/service-account.name': 'default', 'kubernetes.io/service-account.uid': 'b17479eb-c960-11e7-b342-5254002b24c6'}}, 'data': {'ca.crt': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRFM01UQXpNREl3TkRBMU5Gb1hEVEkzTVRBeU9ESXdOREExTkZvd0ZURVRNQkVHQTFVRQpBeE1LYldsdWFXdDFZbVZEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0hvCmYxS1oyd1hFZVNlZ1BCcndGVnRFSy9iS2YxNUdZSmJsdWIxcmhUWStsZWdZdi9pWmpaMi9IcEh1NHFRYXVOUngKRXd1ZXB4QU5HVFFlQy9La0ZPbFo0TGpQeFh6TVpYbllsSU1tamNkcTJnbHVyRjRjSU9nYkN5VkZiNkJhdDVJYgpiT1g0OE92L0t0SGx5Wjd3Y2FHN0I2cHVLbjRuSEloSFVMZmEzSUg3N1lMMUkxdS9VT09MZlZ6bEdDaGpuOGRZClErKytGN2hFSnp0Tnp1LzY2UlI2eGFhb2hpMGMyZThUdnZZYjlXMjk4N0hKRC9BUW9BWGRVVlI2bFZPTVVTaEcKN0VCcUdyK092OEhjL2svV1JNRGFSSzFBdFZhbmFUaURoUnRSM2lJMlphWS9EMVl6ODU4RVpvczJyM1RVQStKaAppWnNtZWZOSndHNVpSbm42V3AwQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBZkRVWlcrV0crbEZ1cC9pZnZzSkh5Sm82aGxaNnZ6K0E0NkpIY1FuaC8vaU1qQVdwTwp2N0xqNFNkRUdZcnhmV3FGcER3M0N4ZFVpelI3T0NXTnlkNXVSOVlKejMrdUdJbjlwNEJOOExsdExiT3lZMEFkCmh2cllxbzFEV2xkWE0zbjN4c085YjRoVVlvcEprazI5UkdMRW9nOGF1RGdWZkpadVhYYnJ1L09FOGtNTWRLVUcKcGhKbVgzK0JVUzgzSjFKSHVIOFIwRzFxVmw0aEgzSitDQ1VESDVvaW9ya2R3ZzMvZkIvTG02YmxCV3h5NU14ZwpRclhZQUxtekZ5aVp4UkFCcS8xM25WcDBzaDU3ZWMvSlI2aFRqLzQ1MFhuK085L0hnT2VKQnZLV0MwM3VDSzlmCkREUHp1M0RCUjZTdGJySlhWVW5SUk9IR3FBTnhWMmJrblJjYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', 'namespace': 'a3ViZS1zeXN0ZW0=', 'token': 'ZXlKaGJHY2lPaUpTVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbExYTjVjM1JsYlNJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKa1pXWmhkV3gwTFhSdmEyVnVMVFZyZURJNElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltUmxabUYxYkhRaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lKaU1UYzBOemxsWWkxak9UWXdMVEV4WlRjdFlqTTBNaTAxTWpVME1EQXlZakkwWXpZaUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZhM1ZpWlMxemVYTjBaVzA2WkdWbVlYVnNkQ0o5LnNGNjFqajI4cDVNUS1kZ2tCVXplcHc2dzU3eG9odERCTFJqSXRUbEhnVlZJTGlOWHY2SThJLUhMOXNGcWw4TVRIVFFyazM3NnJjc0RObWpSUkJVTEZvYjRhb0F0OUwzckxEZFN3WkpvZnR1VVZ2TVp3VmtUVWd2T3NfQ1RaZzRQQnpfUFRldUZfbG1VdEFXZmJsa1VvRjJDdTRqLWdaeURUay1rN2x4YTYtU1B4M0d3Q1pJZmJxU0syUjBhV2phdlZZU0lQWjVpd2VOLVp4M1o0TlpBZFU2blBlRUtZLWE5ZU9lWlFjM2toRmwwYXlRZG4xUnZCaVA1MmxZRXg3OGk5TkJUU0RmWWpPYzdsREJjWmlRSVZQX1FSS2plSFpCLWctYWxab3ZvREpvVHlVU2NzSldIS0VST0tpWVFpSUtzQ01heTBPTlFIMFBFU25JeUE4TWFLQQ=='}, 'type': 'kubernetes.io/service-account-token'}, {'metadata': {'name': 'kubernetes-dashboard-key-holder', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/secrets/kubernetes-dashboard-key-holder', 'uid': 'c790c525-c960-11e7-b342-5254002b24c6', 'resourceVersion': '206', 'creationTimestamp': '2017-11-14T17:25:16Z'}, 'data': {'priv': 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcFhZRHNlb1pYY2lnZlRXL3ZzYzdPNFBqOFpKNExyMjBLQVRDWFlERTl5Umg1Q3g1CnkwUHV6dWJYeHZ3aElDUmZBRnlKR1hrUzVYQzI2NkQzZEFKNWh6SVV4ald1aHErRjdFRDd6M2Y0REdPcWgva04KOFk0TTNWZk1pcVc0K2k3UzRNeXh3Qk9XUWZmSGVzNWNwOWg0d1VsSFMzRkFvUWxhSHB4ZnNZTGliZE8vVmdpcQpVc1o3Tk5FNmRSZkZvcURHTjEweXpOSVR1K1FQNDNhZXdmbFVkbkZqZEtJWldUbkYzaVhmY2sxUzNoOVUzYkZvCm5lYjJCUlpkc2VxSVZFOWVvWWVhNVg4cDdmOVdEeWcyVkFmVzRDRWNxSHEzVTRaQUVMWlR0aXRSeERxSXNSajkKblR4NG0zcjIxSjdxUmdpMks0bFNNZGlDUmpaR1FUb3lKQkpGMHdJREFRQUJBb0lCQUJmSHRWSTlyZldmbndrLwp6MVlROWo5Z2ZrTTY1TkQ2N01pUG5vdW50U2M3OEdIRnpwOWJIUmhaYnd1bk11K1dxcHkzci9DY1NRMzJ2Q056ClYvMHhXZHdIWTVyMUhpYzNWTTBXcmRvc2lOYm5BQnhZdkJ0S2FpanB0SGo4eG5BV2lMSk1XUU9kRFF4Z0d5aFkKUGxMVk5zMjR4V2xmVm9XT2ZZaEd1eTRjL0lRQ0hxWE9hbk8yQ2RaV3duemZVb1U1YVUxOWgyZWJ1Wmd2R0JaLwpsTGRja3BpRWFMZVhZS1NJL1JqcmFJT3JMSVVLNFQ5ajBNelljL1hiWnRwSERDckUvRUdrblBVaDdJT3hNTnVJCks1b2pFTkhYV0VkRG94bTZYbHNRZGhDTThLalV6SnBwNDdHbnBIUnBsZDNZcTJSTU4vNm1IR0dvQXV2cFdpRmkKL1Z1MnJGa0NnWUVBenFpYlY0d0VWZzg3M3d2VVNIYVFUWDI0VkdJL0krTEMxWWlnZGxueVhNRG1penhLd1N2NApuTFAxdnpTUG1TM0k4Q1dVakRiL3pTQmdvZHNjK1NpanBJS1JiclhTeTNheEowZXprK3Vudy9NUVJ3WFp0Qjh6CmpFcGNBQXFFT0l3Y3J0ZmJBRm9ORTU1NnpBNEkzRkdXOWFqaFUxSkFoejdnT3FKcTMvVkNTWjBDZ1lFQXpQZFQKUjF1VDdQd0ptMWl3aFZhVEJwTmFiWmVVUEdvSHN3cUlBeGRNSTd5aXoybityZ20yMnplMW5pL2pZL1hFN0VmLwpTTy8xMTN2SjZKV29TTno3ci9CYVhaclJDeEJVNzNXWFpKRWdORWIvT0IyazFibE1ORVFQcVk1aGRiNDdwNWF4CnZnQjZmTVM5SXNYNVFIUmNIQWFwaTBLRDB6MlVBenFtemMwdktpOENnWUEyck44a2czUG1QUE9QS0hjS2tPdk8KeExOUENBdENlRTBwNTVMa25SbUZOcmdJSUhSNnRTSjZleFpLZHlLQzJWMHZSQklRSXNEOHlWTW5uMndEODUrUAo5OGQ0YmZ5T1BpSFNqYUxTUU9mSzdQVGloWWE2cEFLa1hFd0k2cjllb3BzNEd2M2pFdkFndjY0bmJKTWxqeVNNCmJCanBUWHFyRFpTUGpzY041N3FZOVFLQmdBZEVyZnRWMEFVVFd2UGJUVWN0THNHSThDZjZ2Qkw0WDVXRnhoVDEKK29rNTR6d2ZzaHhSMDk0cU41S0llRFBQUDFCeHJTZlUrbzdOb1BkU2QwaytMTjZzVTBnR2VXcy9CUVFJMDNtSgplKzdlcGFaRHh0aWRYWXBzNzNFL3owenhsZ1AzWUE0d3ppY21ndDU4enIzdVltWE1CcThkaUxjdzg5SzVmYmpHCmtlbVpBb0dCQUlTUzNVZm5qNU9BeGFERTdhWXo2L0l5TlJjeHNRVC9jYWFkUVBoUkhIMmJvTUh1b0J0T0RjNEYKaUl0aUtnc1VjWHAyYWJoaEorbklTNElnaGhuVnh6MEtMenV5UStubWxkWERFaTdnS0EvUDFjSHpMU0VHWGdGZwprc09JOTJkU0ZtaWc0amh2R3E3Q0pwemp6RFN1R1daUjJwYTFXZkx1OURxQjBYeUhyNlZsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==', 'pub': 'LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcFhZRHNlb1pYY2lnZlRXL3ZzYzcKTzRQajhaSjRMcjIwS0FUQ1hZREU5eVJoNUN4NXkwUHV6dWJYeHZ3aElDUmZBRnlKR1hrUzVYQzI2NkQzZEFKNQpoeklVeGpXdWhxK0Y3RUQ3ejNmNERHT3FoL2tOOFk0TTNWZk1pcVc0K2k3UzRNeXh3Qk9XUWZmSGVzNWNwOWg0CndVbEhTM0ZBb1FsYUhweGZzWUxpYmRPL1ZnaXFVc1o3Tk5FNmRSZkZvcURHTjEweXpOSVR1K1FQNDNhZXdmbFUKZG5GamRLSVpXVG5GM2lYZmNrMVMzaDlVM2JGb25lYjJCUlpkc2VxSVZFOWVvWWVhNVg4cDdmOVdEeWcyVkFmVwo0Q0VjcUhxM1U0WkFFTFpUdGl0UnhEcUlzUmo5blR4NG0zcjIxSjdxUmdpMks0bFNNZGlDUmpaR1FUb3lKQkpGCjB3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K'}, 'type': 'Opaque'}]}</msg>
<status status="PASS" starttime="20171117 16:52:48.122" endtime="20171117 16:52:48.122"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.114" endtime="20171117 16:52:48.123"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.114" endtime="20171117 16:52:48.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.123" endtime="20171117 16:52:48.123"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.114" endtime="20171117 16:52:48.123"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.124" endtime="20171117 16:52:48.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.124" endtime="20171117 16:52:48.125"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.124" endtime="20171117 16:52:48.125"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.125" endtime="20171117 16:52:48.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.126" endtime="20171117 16:52:48.126"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.125" endtime="20171117 16:52:48.126"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.127" endtime="20171117 16:52:48.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.127" endtime="20171117 16:52:48.128"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.126" endtime="20171117 16:52:48.128"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.128" endtime="20171117 16:52:48.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.128" endtime="20171117 16:52:48.129"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.128" endtime="20171117 16:52:48.129"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.109" endtime="20171117 16:52:48.129"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.109" endtime="20171117 16:52:48.129"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.106" endtime="20171117 16:52:48.129"></status>
</kw>
<kw name="${apiDict} = {'name': 'serviceaccounts', 'singularName': '', 'namespaced': True, 'kind': 'ServiceAccount', 'verbs': ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch'], 'shortNames'..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.130" level="INFO">${apiName} = serviceaccounts</msg>
<status status="PASS" starttime="20171117 16:52:48.129" endtime="20171117 16:52:48.130"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.130" endtime="20171117 16:52:48.130"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.131" level="INFO">${apiVerbs} = ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:48.131" endtime="20171117 16:52:48.131"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.131" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: deletecollection
3: get
4: list
5: patch
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:48.131" endtime="20171117 16:52:48.131"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.132" endtime="20171117 16:52:48.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.133" endtime="20171117 16:52:48.133"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.132" endtime="20171117 16:52:48.133"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.134" endtime="20171117 16:52:48.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.135" endtime="20171117 16:52:48.135"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.134" endtime="20171117 16:52:48.135"></status>
</kw>
<kw name="${apiverb} = deletecollection" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.135" endtime="20171117 16:52:48.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.136" endtime="20171117 16:52:48.136"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.135" endtime="20171117 16:52:48.136"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>serviceaccounts</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.138" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.138" endtime="20171117 16:52:48.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.143" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/serviceaccounts, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.138" endtime="20171117 16:52:48.143"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.144" level="INFO">${json} = {'kind': 'ServiceAccountList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/serviceaccounts', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default', 'namespace': 'default', ...</msg>
<status status="PASS" starttime="20171117 16:52:48.143" endtime="20171117 16:52:48.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.144" level="INFO">{'kind': 'ServiceAccountList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/serviceaccounts', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'default', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/serviceaccounts/default', 'uid': 'b1739fec-c960-11e7-b342-5254002b24c6', 'resourceVersion': '41', 'creationTimestamp': '2017-11-14T17:24:38Z'}, 'secrets': [{'name': 'default-token-rpcgf'}]}, {'metadata': {'name': 'default', 'namespace': 'kube-public', 'selfLink': '/api/v1/namespaces/kube-public/serviceaccounts/default', 'uid': 'b174d07e-c960-11e7-b342-5254002b24c6', 'resourceVersion': '45', 'creationTimestamp': '2017-11-14T17:24:38Z'}, 'secrets': [{'name': 'default-token-kf5d9'}]}, {'metadata': {'name': 'default', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/serviceaccounts/default', 'uid': 'b17479eb-c960-11e7-b342-5254002b24c6', 'resourceVersion': '43', 'creationTimestamp': '2017-11-14T17:24:38Z'}, 'secrets': [{'name': 'default-token-5kx28'}]}]}</msg>
<status status="PASS" starttime="20171117 16:52:48.144" endtime="20171117 16:52:48.145"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.137" endtime="20171117 16:52:48.145"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.137" endtime="20171117 16:52:48.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.145" endtime="20171117 16:52:48.146"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.136" endtime="20171117 16:52:48.146"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.146" endtime="20171117 16:52:48.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.146" endtime="20171117 16:52:48.147"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.146" endtime="20171117 16:52:48.147"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.147" endtime="20171117 16:52:48.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.148" endtime="20171117 16:52:48.148"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.147" endtime="20171117 16:52:48.148"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.149" endtime="20171117 16:52:48.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.149" endtime="20171117 16:52:48.150"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.148" endtime="20171117 16:52:48.150"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.150" endtime="20171117 16:52:48.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.151" endtime="20171117 16:52:48.151"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.150" endtime="20171117 16:52:48.151"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.132" endtime="20171117 16:52:48.151"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.132" endtime="20171117 16:52:48.151"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.129" endtime="20171117 16:52:48.151"></status>
</kw>
<kw name="${apiDict} = {'name': 'services', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': ['create', 'delete', 'get', 'list', 'patch', 'proxy', 'update', 'watch'], 'shortNames': ['svc'], 'categories': ..." type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.152" level="INFO">${apiName} = services</msg>
<status status="PASS" starttime="20171117 16:52:48.152" endtime="20171117 16:52:48.152"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.152" endtime="20171117 16:52:48.153"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.153" level="INFO">${apiVerbs} = ['create', 'delete', 'get', 'list', 'patch', 'proxy', 'update', 'watch']</msg>
<status status="PASS" starttime="20171117 16:52:48.153" endtime="20171117 16:52:48.153"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.154" level="INFO">List length is 8 and it contains following items:
0: create
1: delete
2: get
3: list
4: patch
5: proxy
6: update
7: watch</msg>
<status status="PASS" starttime="20171117 16:52:48.153" endtime="20171117 16:52:48.154"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = create" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.155" endtime="20171117 16:52:48.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.155" endtime="20171117 16:52:48.156"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.155" endtime="20171117 16:52:48.156"></status>
</kw>
<kw name="${apiverb} = delete" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.156" endtime="20171117 16:52:48.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.157" endtime="20171117 16:52:48.157"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.156" endtime="20171117 16:52:48.157"></status>
</kw>
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>services</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.159" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.159" endtime="20171117 16:52:48.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.165" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/services, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.159" endtime="20171117 16:52:48.165"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.167" level="INFO">${json} = {'kind': 'ServiceList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/services', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'hello-minikube', 'namespace': 'default', 'selfLi...</msg>
<status status="PASS" starttime="20171117 16:52:48.166" endtime="20171117 16:52:48.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.167" level="INFO">{'kind': 'ServiceList', 'apiVersion': 'v1', 'metadata': {'selfLink': '/api/v1/services', 'resourceVersion': '340779'}, 'items': [{'metadata': {'name': 'hello-minikube', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/services/hello-minikube', 'uid': '6db39e72-c961-11e7-b342-5254002b24c6', 'resourceVersion': '583', 'creationTimestamp': '2017-11-14T17:29:54Z', 'labels': {'run': 'hello-minikube'}}, 'spec': {'ports': [{'protocol': 'TCP', 'port': 8081, 'targetPort': 8081, 'nodePort': 32321}], 'selector': {'run': 'hello-minikube'}, 'clusterIP': '10.0.0.180', 'type': 'NodePort', 'sessionAffinity': 'None', 'externalTrafficPolicy': 'Cluster'}, 'status': {'loadBalancer': {}}}, {'metadata': {'name': 'kubernetes', 'namespace': 'default', 'selfLink': '/api/v1/namespaces/default/services/kubernetes', 'uid': 'afc0a0df-c960-11e7-b342-5254002b24c6', 'resourceVersion': '6', 'creationTimestamp': '2017-11-14T17:24:36Z', 'labels': {'component': 'apiserver', 'provider': 'kubernetes'}}, 'spec': {'ports': [{'name': 'https', 'protocol': 'TCP', 'port': 443, 'targetPort': 8443}], 'clusterIP': '10.0.0.1', 'type': 'ClusterIP', 'sessionAffinity': 'ClientIP', 'sessionAffinityConfig': {'clientIP': {'timeoutSeconds': 10800}}}, 'status': {'loadBalancer': {}}}, {'metadata': {'name': 'default-http-backend', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/services/default-http-backend', 'uid': 'b7f4b006-c960-11e7-b342-5254002b24c6', 'resourceVersion': '112', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'default-http-backend'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"default-http-backend"},"name":"default-http-backend","namespace":"kube-system"},"spec":{"ports":[{"nodePort":30001,"port":80,"targetPort":8080}],"selector":{"app":"default-http-backend"},"type":"NodePort"}}\n'}}, 'spec': {'ports': [{'protocol': 'TCP', 'port': 80, 'targetPort': 8080, 'nodePort': 30001}], 'selector': {'app': 'default-http-backend'}, 'clusterIP': '10.0.0.54', 'type': 'NodePort', 'sessionAffinity': 'None', 'externalTrafficPolicy': 'Cluster'}, 'status': {'loadBalancer': {}}}, {'metadata': {'name': 'kube-dns', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/services/kube-dns', 'uid': 'b814dc7b-c960-11e7-b342-5254002b24c6', 'resourceVersion': '128', 'creationTimestamp': '2017-11-14T17:24:50Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'k8s-app': 'kube-dns', 'kubernetes.io/name': 'KubeDNS'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/name":"KubeDNS"},"name":"kube-dns","namespace":"kube-system"},"spec":{"clusterIP":"10.0.0.10","ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"}],"selector":{"k8s-app":"kube-dns"}}}\n'}}, 'spec': {'ports': [{'name': 'dns', 'protocol': 'UDP', 'port': 53, 'targetPort': 53}, {'name': 'dns-tcp', 'protocol': 'TCP', 'port': 53, 'targetPort': 53}], 'selector': {'k8s-app': 'kube-dns'}, 'clusterIP': '10.0.0.10', 'type': 'ClusterIP', 'sessionAffinity': 'None'}, 'status': {'loadBalancer': {}}}, {'metadata': {'name': 'kubernetes-dashboard', 'namespace': 'kube-system', 'selfLink': '/api/v1/namespaces/kube-system/services/kubernetes-dashboard', 'uid': 'b7c01bc3-c960-11e7-b342-5254002b24c6', 'resourceVersion': '90', 'creationTimestamp': '2017-11-14T17:24:49Z', 'labels': {'addonmanager.kubernetes.io/mode': 'Reconcile', 'app': 'kubernetes-dashboard', 'kubernetes.io/minikube-addons': 'dashboard', 'kubernetes.io/minikube-addons-endpoint': 'dashboard'}, 'annotations': {'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"kubernetes-dashboard","kubernetes.io/minikube-addons":"dashboard","kubernetes.io/minikube-addons-endpoint":"dashboard"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"ports":[{"nodePort":30000,"port":80,"targetPort":9090}],"selector":{"app":"kubernetes-dashboard"},"type":"NodePort"}}\n'}}, 'spec': {'ports': [{'protocol': 'TCP', 'port': 80, 'targetPort': 9090, 'nodePort': 30000}], 'selector': {'app': 'kubernetes-dashboard'}, 'clusterIP': '10.0.0.92', 'type': 'NodePort', 'sessionAffinity': 'None', 'externalTrafficPolicy': 'Cluster'}, 'status': {'loadBalancer': {}}}]}</msg>
<status status="PASS" starttime="20171117 16:52:48.167" endtime="20171117 16:52:48.168"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.158" endtime="20171117 16:52:48.168"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.157" endtime="20171117 16:52:48.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.168" endtime="20171117 16:52:48.169"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.157" endtime="20171117 16:52:48.169"></status>
</kw>
<kw name="${apiverb} = list" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.169" endtime="20171117 16:52:48.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.170" endtime="20171117 16:52:48.170"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.169" endtime="20171117 16:52:48.170"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.170" endtime="20171117 16:52:48.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.171" endtime="20171117 16:52:48.171"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.170" endtime="20171117 16:52:48.172"></status>
</kw>
<kw name="${apiverb} = proxy" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.172" endtime="20171117 16:52:48.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.172" endtime="20171117 16:52:48.173"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.172" endtime="20171117 16:52:48.173"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.173" endtime="20171117 16:52:48.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.174" endtime="20171117 16:52:48.174"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.173" endtime="20171117 16:52:48.174"></status>
</kw>
<kw name="${apiverb} = watch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.175" endtime="20171117 16:52:48.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.175" endtime="20171117 16:52:48.176"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.174" endtime="20171117 16:52:48.176"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.154" endtime="20171117 16:52:48.176"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.154" endtime="20171117 16:52:48.176"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.152" endtime="20171117 16:52:48.176"></status>
</kw>
<kw name="${apiDict} = {'name': 'services/proxy', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': []}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.177" level="INFO">${apiName} = services/proxy</msg>
<status status="PASS" starttime="20171117 16:52:48.176" endtime="20171117 16:52:48.177"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.177" endtime="20171117 16:52:48.177"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.178" level="INFO">${apiVerbs} = []</msg>
<status status="PASS" starttime="20171117 16:52:48.177" endtime="20171117 16:52:48.178"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.178" level="INFO">List is empty.</msg>
<status status="PASS" starttime="20171117 16:52:48.178" endtime="20171117 16:52:48.178"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<status status="PASS" starttime="20171117 16:52:48.179" endtime="20171117 16:52:48.179"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.179" endtime="20171117 16:52:48.179"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.176" endtime="20171117 16:52:48.179"></status>
</kw>
<kw name="${apiDict} = {'name': 'services/status', 'singularName': '', 'namespaced': True, 'kind': 'Service', 'verbs': ['get', 'patch', 'update']}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>name</arg>
</arguments>
<assign>
<var>${apiName}</var>
</assign>
<msg timestamp="20171117 16:52:48.180" level="INFO">${apiName} = services/status</msg>
<status status="PASS" starttime="20171117 16:52:48.180" endtime="20171117 16:52:48.180"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.180" endtime="20171117 16:52:48.181"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${apiDict}</arg>
<arg>verbs</arg>
</arguments>
<assign>
<var>${apiVerbs}</var>
</assign>
<msg timestamp="20171117 16:52:48.181" level="INFO">${apiVerbs} = ['get', 'patch', 'update']</msg>
<status status="PASS" starttime="20171117 16:52:48.181" endtime="20171117 16:52:48.181"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${apiVerbs}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.182" level="INFO">List length is 3 and it contains following items:
0: get
1: patch
2: update</msg>
<status status="PASS" starttime="20171117 16:52:48.181" endtime="20171117 16:52:48.182"></status>
</kw>
<kw name="GetListofVerbs">
<arguments>
<arg>${apiVerbs}</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="${apiverb} IN [ @{apiVerbs} ]" type="for">
<kw name="${apiverb} = get" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<kw name="runTestAPIget">
<tags>
<tag>services/status</tag>
</tags>
<arguments>
<arg>${apiName}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>kubernetes</arg>
<arg>${API_ENDPOINT}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.184" level="INFO">Creating Session using : alias=kubernetes, url=http://127.0.0.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171117 16:52:48.184" endtime="20171117 16:52:48.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>kubernetes</arg>
<arg>/api/v1/${apiName}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20171117 16:52:48.189" level="INFO">Get Request using : alias=kubernetes, uri=/api/v1/services/status, headers=None json=None</msg>
<msg timestamp="20171117 16:52:48.189" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171117 16:52:48.185" endtime="20171117 16:52:48.189"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171117 16:52:48.190" level="INFO">${json} = {'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.189" endtime="20171117 16:52:48.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20171117 16:52:48.190" level="INFO">{'kind': 'Status', 'apiVersion': 'v1', 'metadata': {}, 'status': 'Failure', 'message': 'the server could not find the requested resource', 'reason': 'NotFound', 'details': {}, 'code': 404}</msg>
<status status="PASS" starttime="20171117 16:52:48.190" endtime="20171117 16:52:48.190"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.183" endtime="20171117 16:52:48.191"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.183" endtime="20171117 16:52:48.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.191" endtime="20171117 16:52:48.191"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.183" endtime="20171117 16:52:48.191"></status>
</kw>
<kw name="${apiverb} = patch" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.192" endtime="20171117 16:52:48.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.192" endtime="20171117 16:52:48.193"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.192" endtime="20171117 16:52:48.193"></status>
</kw>
<kw name="${apiverb} = update" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'get'</arg>
<arg>runTestAPIget</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.193" endtime="20171117 16:52:48.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${apiverb}' == 'create' and '${apiName}' == 'namespaces'</arg>
<arg>runTestAPIpost</arg>
<arg>${apiName}</arg>
</arguments>
<status status="PASS" starttime="20171117 16:52:48.194" endtime="20171117 16:52:48.194"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.193" endtime="20171117 16:52:48.194"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.182" endtime="20171117 16:52:48.194"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.182" endtime="20171117 16:52:48.194"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:48.180" endtime="20171117 16:52:48.194"></status>
</kw>
<status status="PASS" starttime="20171117 16:52:47.611" endtime="20171117 16:52:48.194"></status>
</kw>
<doc>api v1</doc>
<status status="PASS" starttime="20171117 16:52:47.595" endtime="20171117 16:52:48.195" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20171117 16:52:48.196" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171117 16:52:48.196" endtime="20171117 16:52:48.198"></status>
</kw>
<doc>REST kubernetes.</doc>
<status status="PASS" starttime="20171117 16:52:47.368" endtime="20171117 16:52:48.198"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Kuberobot">Kuberobot</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
